// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: documents/v2alpha/content_graph.proto

package documents

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContentGraphClient is the client API for ContentGraph service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentGraphClient interface {
	ListCitations(ctx context.Context, in *ListCitationsRequest, opts ...grpc.CallOption) (*ListCitationsResponse, error)
}

type contentGraphClient struct {
	cc grpc.ClientConnInterface
}

func NewContentGraphClient(cc grpc.ClientConnInterface) ContentGraphClient {
	return &contentGraphClient{cc}
}

func (c *contentGraphClient) ListCitations(ctx context.Context, in *ListCitationsRequest, opts ...grpc.CallOption) (*ListCitationsResponse, error) {
	out := new(ListCitationsResponse)
	err := c.cc.Invoke(ctx, "/com.seed.documents.v2alpha.ContentGraph/ListCitations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentGraphServer is the server API for ContentGraph service.
// All implementations should embed UnimplementedContentGraphServer
// for forward compatibility
type ContentGraphServer interface {
	ListCitations(context.Context, *ListCitationsRequest) (*ListCitationsResponse, error)
}

// UnimplementedContentGraphServer should be embedded to have forward compatible implementations.
type UnimplementedContentGraphServer struct {
}

func (UnimplementedContentGraphServer) ListCitations(context.Context, *ListCitationsRequest) (*ListCitationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCitations not implemented")
}

// UnsafeContentGraphServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentGraphServer will
// result in compilation errors.
type UnsafeContentGraphServer interface {
	mustEmbedUnimplementedContentGraphServer()
}

func RegisterContentGraphServer(s grpc.ServiceRegistrar, srv ContentGraphServer) {
	s.RegisterService(&ContentGraph_ServiceDesc, srv)
}

func _ContentGraph_ListCitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCitationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentGraphServer).ListCitations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.documents.v2alpha.ContentGraph/ListCitations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentGraphServer).ListCitations(ctx, req.(*ListCitationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContentGraph_ServiceDesc is the grpc.ServiceDesc for ContentGraph service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContentGraph_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.seed.documents.v2alpha.ContentGraph",
	HandlerType: (*ContentGraphServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCitations",
			Handler:    _ContentGraph_ListCitations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "documents/v2alpha/content_graph.proto",
}
