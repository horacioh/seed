// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: documents/v2alpha/documents.proto

package documents

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DraftsClient is the client API for Drafts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DraftsClient interface {
	// Creates a new draft of an existing standalone branch
	CreateDraft(ctx context.Context, in *CreateDraftRequest, opts ...grpc.CallOption) (*Draft, error)
	// Creates a draft for a new branch.
	CreateBranchDraft(ctx context.Context, in *CreateBranchDraftRequest, opts ...grpc.CallOption) (*Draft, error)
	// Creates a draft for an index branch. Thows if a draft already exists for this index.
	CreateIndexDraft(ctx context.Context, in *CreateIndexDraftRequest, opts ...grpc.CallOption) (*Draft, error)
	// Create a draft for a profile document. Shows if a draft already exists for this profile.
	CreateProfileDraft(ctx context.Context, in *CreateProfileDraftRequest, opts ...grpc.CallOption) (*Draft, error)
	// Deletes a draft by its document ID.
	DeleteDraft(ctx context.Context, in *DeleteDraftRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Gets a single draft if exists.
	GetDraft(ctx context.Context, in *GetDraftRequest, opts ...grpc.CallOption) (*Draft, error)
	// Gets a draft for a profile document.
	GetProfileDraft(ctx context.Context, in *GetProfileDraftRequest, opts ...grpc.CallOption) (*Draft, error)
	// Updates a draft using granular update operations.
	UpdateDraft(ctx context.Context, in *UpdateDraftRequest, opts ...grpc.CallOption) (*UpdateDraftResponse, error)
	// List currently stored drafts.
	ListDrafts(ctx context.Context, in *ListDraftsRequest, opts ...grpc.CallOption) (*ListDraftsResponse, error)
	// Lists drafts for a given document.
	ListDocumentDrafts(ctx context.Context, in *ListDocumentDraftsRequest, opts ...grpc.CallOption) (*ListDocumentDraftsResponse, error)
	// Publishes a draft. Returns the branch that was published.
	PublishDraft(ctx context.Context, in *PublishDraftRequest, opts ...grpc.CallOption) (*Branch, error)
}

type draftsClient struct {
	cc grpc.ClientConnInterface
}

func NewDraftsClient(cc grpc.ClientConnInterface) DraftsClient {
	return &draftsClient{cc}
}

func (c *draftsClient) CreateDraft(ctx context.Context, in *CreateDraftRequest, opts ...grpc.CallOption) (*Draft, error) {
	out := new(Draft)
	err := c.cc.Invoke(ctx, "/com.seed.documents.v2alpha.Drafts/CreateDraft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *draftsClient) CreateBranchDraft(ctx context.Context, in *CreateBranchDraftRequest, opts ...grpc.CallOption) (*Draft, error) {
	out := new(Draft)
	err := c.cc.Invoke(ctx, "/com.seed.documents.v2alpha.Drafts/CreateBranchDraft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *draftsClient) CreateIndexDraft(ctx context.Context, in *CreateIndexDraftRequest, opts ...grpc.CallOption) (*Draft, error) {
	out := new(Draft)
	err := c.cc.Invoke(ctx, "/com.seed.documents.v2alpha.Drafts/CreateIndexDraft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *draftsClient) CreateProfileDraft(ctx context.Context, in *CreateProfileDraftRequest, opts ...grpc.CallOption) (*Draft, error) {
	out := new(Draft)
	err := c.cc.Invoke(ctx, "/com.seed.documents.v2alpha.Drafts/CreateProfileDraft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *draftsClient) DeleteDraft(ctx context.Context, in *DeleteDraftRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.seed.documents.v2alpha.Drafts/DeleteDraft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *draftsClient) GetDraft(ctx context.Context, in *GetDraftRequest, opts ...grpc.CallOption) (*Draft, error) {
	out := new(Draft)
	err := c.cc.Invoke(ctx, "/com.seed.documents.v2alpha.Drafts/GetDraft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *draftsClient) GetProfileDraft(ctx context.Context, in *GetProfileDraftRequest, opts ...grpc.CallOption) (*Draft, error) {
	out := new(Draft)
	err := c.cc.Invoke(ctx, "/com.seed.documents.v2alpha.Drafts/GetProfileDraft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *draftsClient) UpdateDraft(ctx context.Context, in *UpdateDraftRequest, opts ...grpc.CallOption) (*UpdateDraftResponse, error) {
	out := new(UpdateDraftResponse)
	err := c.cc.Invoke(ctx, "/com.seed.documents.v2alpha.Drafts/UpdateDraft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *draftsClient) ListDrafts(ctx context.Context, in *ListDraftsRequest, opts ...grpc.CallOption) (*ListDraftsResponse, error) {
	out := new(ListDraftsResponse)
	err := c.cc.Invoke(ctx, "/com.seed.documents.v2alpha.Drafts/ListDrafts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *draftsClient) ListDocumentDrafts(ctx context.Context, in *ListDocumentDraftsRequest, opts ...grpc.CallOption) (*ListDocumentDraftsResponse, error) {
	out := new(ListDocumentDraftsResponse)
	err := c.cc.Invoke(ctx, "/com.seed.documents.v2alpha.Drafts/ListDocumentDrafts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *draftsClient) PublishDraft(ctx context.Context, in *PublishDraftRequest, opts ...grpc.CallOption) (*Branch, error) {
	out := new(Branch)
	err := c.cc.Invoke(ctx, "/com.seed.documents.v2alpha.Drafts/PublishDraft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DraftsServer is the server API for Drafts service.
// All implementations should embed UnimplementedDraftsServer
// for forward compatibility
type DraftsServer interface {
	// Creates a new draft of an existing standalone branch
	CreateDraft(context.Context, *CreateDraftRequest) (*Draft, error)
	// Creates a draft for a new branch.
	CreateBranchDraft(context.Context, *CreateBranchDraftRequest) (*Draft, error)
	// Creates a draft for an index branch. Thows if a draft already exists for this index.
	CreateIndexDraft(context.Context, *CreateIndexDraftRequest) (*Draft, error)
	// Create a draft for a profile document. Shows if a draft already exists for this profile.
	CreateProfileDraft(context.Context, *CreateProfileDraftRequest) (*Draft, error)
	// Deletes a draft by its document ID.
	DeleteDraft(context.Context, *DeleteDraftRequest) (*emptypb.Empty, error)
	// Gets a single draft if exists.
	GetDraft(context.Context, *GetDraftRequest) (*Draft, error)
	// Gets a draft for a profile document.
	GetProfileDraft(context.Context, *GetProfileDraftRequest) (*Draft, error)
	// Updates a draft using granular update operations.
	UpdateDraft(context.Context, *UpdateDraftRequest) (*UpdateDraftResponse, error)
	// List currently stored drafts.
	ListDrafts(context.Context, *ListDraftsRequest) (*ListDraftsResponse, error)
	// Lists drafts for a given document.
	ListDocumentDrafts(context.Context, *ListDocumentDraftsRequest) (*ListDocumentDraftsResponse, error)
	// Publishes a draft. Returns the branch that was published.
	PublishDraft(context.Context, *PublishDraftRequest) (*Branch, error)
}

// UnimplementedDraftsServer should be embedded to have forward compatible implementations.
type UnimplementedDraftsServer struct {
}

func (UnimplementedDraftsServer) CreateDraft(context.Context, *CreateDraftRequest) (*Draft, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDraft not implemented")
}
func (UnimplementedDraftsServer) CreateBranchDraft(context.Context, *CreateBranchDraftRequest) (*Draft, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBranchDraft not implemented")
}
func (UnimplementedDraftsServer) CreateIndexDraft(context.Context, *CreateIndexDraftRequest) (*Draft, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIndexDraft not implemented")
}
func (UnimplementedDraftsServer) CreateProfileDraft(context.Context, *CreateProfileDraftRequest) (*Draft, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProfileDraft not implemented")
}
func (UnimplementedDraftsServer) DeleteDraft(context.Context, *DeleteDraftRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDraft not implemented")
}
func (UnimplementedDraftsServer) GetDraft(context.Context, *GetDraftRequest) (*Draft, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDraft not implemented")
}
func (UnimplementedDraftsServer) GetProfileDraft(context.Context, *GetProfileDraftRequest) (*Draft, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileDraft not implemented")
}
func (UnimplementedDraftsServer) UpdateDraft(context.Context, *UpdateDraftRequest) (*UpdateDraftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDraft not implemented")
}
func (UnimplementedDraftsServer) ListDrafts(context.Context, *ListDraftsRequest) (*ListDraftsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDrafts not implemented")
}
func (UnimplementedDraftsServer) ListDocumentDrafts(context.Context, *ListDocumentDraftsRequest) (*ListDocumentDraftsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDocumentDrafts not implemented")
}
func (UnimplementedDraftsServer) PublishDraft(context.Context, *PublishDraftRequest) (*Branch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishDraft not implemented")
}

// UnsafeDraftsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DraftsServer will
// result in compilation errors.
type UnsafeDraftsServer interface {
	mustEmbedUnimplementedDraftsServer()
}

func RegisterDraftsServer(s grpc.ServiceRegistrar, srv DraftsServer) {
	s.RegisterService(&Drafts_ServiceDesc, srv)
}

func _Drafts_CreateDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDraftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DraftsServer).CreateDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.documents.v2alpha.Drafts/CreateDraft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DraftsServer).CreateDraft(ctx, req.(*CreateDraftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drafts_CreateBranchDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBranchDraftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DraftsServer).CreateBranchDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.documents.v2alpha.Drafts/CreateBranchDraft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DraftsServer).CreateBranchDraft(ctx, req.(*CreateBranchDraftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drafts_CreateIndexDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIndexDraftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DraftsServer).CreateIndexDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.documents.v2alpha.Drafts/CreateIndexDraft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DraftsServer).CreateIndexDraft(ctx, req.(*CreateIndexDraftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drafts_CreateProfileDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProfileDraftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DraftsServer).CreateProfileDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.documents.v2alpha.Drafts/CreateProfileDraft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DraftsServer).CreateProfileDraft(ctx, req.(*CreateProfileDraftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drafts_DeleteDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDraftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DraftsServer).DeleteDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.documents.v2alpha.Drafts/DeleteDraft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DraftsServer).DeleteDraft(ctx, req.(*DeleteDraftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drafts_GetDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDraftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DraftsServer).GetDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.documents.v2alpha.Drafts/GetDraft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DraftsServer).GetDraft(ctx, req.(*GetDraftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drafts_GetProfileDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileDraftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DraftsServer).GetProfileDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.documents.v2alpha.Drafts/GetProfileDraft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DraftsServer).GetProfileDraft(ctx, req.(*GetProfileDraftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drafts_UpdateDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDraftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DraftsServer).UpdateDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.documents.v2alpha.Drafts/UpdateDraft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DraftsServer).UpdateDraft(ctx, req.(*UpdateDraftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drafts_ListDrafts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDraftsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DraftsServer).ListDrafts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.documents.v2alpha.Drafts/ListDrafts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DraftsServer).ListDrafts(ctx, req.(*ListDraftsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drafts_ListDocumentDrafts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDocumentDraftsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DraftsServer).ListDocumentDrafts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.documents.v2alpha.Drafts/ListDocumentDrafts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DraftsServer).ListDocumentDrafts(ctx, req.(*ListDocumentDraftsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drafts_PublishDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishDraftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DraftsServer).PublishDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.documents.v2alpha.Drafts/PublishDraft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DraftsServer).PublishDraft(ctx, req.(*PublishDraftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Drafts_ServiceDesc is the grpc.ServiceDesc for Drafts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Drafts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.seed.documents.v2alpha.Drafts",
	HandlerType: (*DraftsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDraft",
			Handler:    _Drafts_CreateDraft_Handler,
		},
		{
			MethodName: "CreateBranchDraft",
			Handler:    _Drafts_CreateBranchDraft_Handler,
		},
		{
			MethodName: "CreateIndexDraft",
			Handler:    _Drafts_CreateIndexDraft_Handler,
		},
		{
			MethodName: "CreateProfileDraft",
			Handler:    _Drafts_CreateProfileDraft_Handler,
		},
		{
			MethodName: "DeleteDraft",
			Handler:    _Drafts_DeleteDraft_Handler,
		},
		{
			MethodName: "GetDraft",
			Handler:    _Drafts_GetDraft_Handler,
		},
		{
			MethodName: "GetProfileDraft",
			Handler:    _Drafts_GetProfileDraft_Handler,
		},
		{
			MethodName: "UpdateDraft",
			Handler:    _Drafts_UpdateDraft_Handler,
		},
		{
			MethodName: "ListDrafts",
			Handler:    _Drafts_ListDrafts_Handler,
		},
		{
			MethodName: "ListDocumentDrafts",
			Handler:    _Drafts_ListDocumentDrafts_Handler,
		},
		{
			MethodName: "PublishDraft",
			Handler:    _Drafts_PublishDraft_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "documents/v2alpha/documents.proto",
}

// DocumentsClient is the client API for Documents service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocumentsClient interface {
	// Gets a single document.
	GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*Document, error)
	// Gets an account's profile document.
	GetProfileDocument(ctx context.Context, in *GetProfileDocumentRequest, opts ...grpc.CallOption) (*Document, error)
	// Immediately changes an account's profile document.
	ChangeProfileDocument(ctx context.Context, in *ChangeProfileDocumentRequest, opts ...grpc.CallOption) (*Document, error)
	// Lists all profile documents.
	ListProfileDocuments(ctx context.Context, in *ListProfileDocumentsRequest, opts ...grpc.CallOption) (*ListProfileDocumentsResponse, error)
	// Gets a document within the index(es) of other documents.
	GetDocumentIndex(ctx context.Context, in *GetDocumentIndexRequest, opts ...grpc.CallOption) (*GetDocumentIndexResponse, error)
	// Immediately changes a document.
	ChangeDocument(ctx context.Context, in *ChangeDocumentRequest, opts ...grpc.CallOption) (*Document, error)
	// Lists all documents. Only the most recent versions show up.
	ListDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...grpc.CallOption) (*ListDocumentsResponse, error)
	// Lists branches of a document. Includes standalone and index branches, and any drafts for these branches
	ListDocumentBranches(ctx context.Context, in *ListDocumentBranchesRequest, opts ...grpc.CallOption) (*ListDocumentBranchesResponse, error)
	// Push Local document to the gateway.
	PushDocument(ctx context.Context, in *PushDocumentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Lists documents owned by a given account.
	ListAccountDocuments(ctx context.Context, in *ListAccountDocumentsRequest, opts ...grpc.CallOption) (*ListDocumentsResponse, error)
}

type documentsClient struct {
	cc grpc.ClientConnInterface
}

func NewDocumentsClient(cc grpc.ClientConnInterface) DocumentsClient {
	return &documentsClient{cc}
}

func (c *documentsClient) GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*Document, error) {
	out := new(Document)
	err := c.cc.Invoke(ctx, "/com.seed.documents.v2alpha.Documents/GetDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsClient) GetProfileDocument(ctx context.Context, in *GetProfileDocumentRequest, opts ...grpc.CallOption) (*Document, error) {
	out := new(Document)
	err := c.cc.Invoke(ctx, "/com.seed.documents.v2alpha.Documents/GetProfileDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsClient) ChangeProfileDocument(ctx context.Context, in *ChangeProfileDocumentRequest, opts ...grpc.CallOption) (*Document, error) {
	out := new(Document)
	err := c.cc.Invoke(ctx, "/com.seed.documents.v2alpha.Documents/ChangeProfileDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsClient) ListProfileDocuments(ctx context.Context, in *ListProfileDocumentsRequest, opts ...grpc.CallOption) (*ListProfileDocumentsResponse, error) {
	out := new(ListProfileDocumentsResponse)
	err := c.cc.Invoke(ctx, "/com.seed.documents.v2alpha.Documents/ListProfileDocuments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsClient) GetDocumentIndex(ctx context.Context, in *GetDocumentIndexRequest, opts ...grpc.CallOption) (*GetDocumentIndexResponse, error) {
	out := new(GetDocumentIndexResponse)
	err := c.cc.Invoke(ctx, "/com.seed.documents.v2alpha.Documents/GetDocumentIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsClient) ChangeDocument(ctx context.Context, in *ChangeDocumentRequest, opts ...grpc.CallOption) (*Document, error) {
	out := new(Document)
	err := c.cc.Invoke(ctx, "/com.seed.documents.v2alpha.Documents/ChangeDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsClient) ListDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...grpc.CallOption) (*ListDocumentsResponse, error) {
	out := new(ListDocumentsResponse)
	err := c.cc.Invoke(ctx, "/com.seed.documents.v2alpha.Documents/ListDocuments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsClient) ListDocumentBranches(ctx context.Context, in *ListDocumentBranchesRequest, opts ...grpc.CallOption) (*ListDocumentBranchesResponse, error) {
	out := new(ListDocumentBranchesResponse)
	err := c.cc.Invoke(ctx, "/com.seed.documents.v2alpha.Documents/ListDocumentBranches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsClient) PushDocument(ctx context.Context, in *PushDocumentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.seed.documents.v2alpha.Documents/PushDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsClient) ListAccountDocuments(ctx context.Context, in *ListAccountDocumentsRequest, opts ...grpc.CallOption) (*ListDocumentsResponse, error) {
	out := new(ListDocumentsResponse)
	err := c.cc.Invoke(ctx, "/com.seed.documents.v2alpha.Documents/ListAccountDocuments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocumentsServer is the server API for Documents service.
// All implementations should embed UnimplementedDocumentsServer
// for forward compatibility
type DocumentsServer interface {
	// Gets a single document.
	GetDocument(context.Context, *GetDocumentRequest) (*Document, error)
	// Gets an account's profile document.
	GetProfileDocument(context.Context, *GetProfileDocumentRequest) (*Document, error)
	// Immediately changes an account's profile document.
	ChangeProfileDocument(context.Context, *ChangeProfileDocumentRequest) (*Document, error)
	// Lists all profile documents.
	ListProfileDocuments(context.Context, *ListProfileDocumentsRequest) (*ListProfileDocumentsResponse, error)
	// Gets a document within the index(es) of other documents.
	GetDocumentIndex(context.Context, *GetDocumentIndexRequest) (*GetDocumentIndexResponse, error)
	// Immediately changes a document.
	ChangeDocument(context.Context, *ChangeDocumentRequest) (*Document, error)
	// Lists all documents. Only the most recent versions show up.
	ListDocuments(context.Context, *ListDocumentsRequest) (*ListDocumentsResponse, error)
	// Lists branches of a document. Includes standalone and index branches, and any drafts for these branches
	ListDocumentBranches(context.Context, *ListDocumentBranchesRequest) (*ListDocumentBranchesResponse, error)
	// Push Local document to the gateway.
	PushDocument(context.Context, *PushDocumentRequest) (*emptypb.Empty, error)
	// Lists documents owned by a given account.
	ListAccountDocuments(context.Context, *ListAccountDocumentsRequest) (*ListDocumentsResponse, error)
}

// UnimplementedDocumentsServer should be embedded to have forward compatible implementations.
type UnimplementedDocumentsServer struct {
}

func (UnimplementedDocumentsServer) GetDocument(context.Context, *GetDocumentRequest) (*Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}
func (UnimplementedDocumentsServer) GetProfileDocument(context.Context, *GetProfileDocumentRequest) (*Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileDocument not implemented")
}
func (UnimplementedDocumentsServer) ChangeProfileDocument(context.Context, *ChangeProfileDocumentRequest) (*Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeProfileDocument not implemented")
}
func (UnimplementedDocumentsServer) ListProfileDocuments(context.Context, *ListProfileDocumentsRequest) (*ListProfileDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProfileDocuments not implemented")
}
func (UnimplementedDocumentsServer) GetDocumentIndex(context.Context, *GetDocumentIndexRequest) (*GetDocumentIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentIndex not implemented")
}
func (UnimplementedDocumentsServer) ChangeDocument(context.Context, *ChangeDocumentRequest) (*Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeDocument not implemented")
}
func (UnimplementedDocumentsServer) ListDocuments(context.Context, *ListDocumentsRequest) (*ListDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDocuments not implemented")
}
func (UnimplementedDocumentsServer) ListDocumentBranches(context.Context, *ListDocumentBranchesRequest) (*ListDocumentBranchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDocumentBranches not implemented")
}
func (UnimplementedDocumentsServer) PushDocument(context.Context, *PushDocumentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushDocument not implemented")
}
func (UnimplementedDocumentsServer) ListAccountDocuments(context.Context, *ListAccountDocumentsRequest) (*ListDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccountDocuments not implemented")
}

// UnsafeDocumentsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocumentsServer will
// result in compilation errors.
type UnsafeDocumentsServer interface {
	mustEmbedUnimplementedDocumentsServer()
}

func RegisterDocumentsServer(s grpc.ServiceRegistrar, srv DocumentsServer) {
	s.RegisterService(&Documents_ServiceDesc, srv)
}

func _Documents_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.documents.v2alpha.Documents/GetDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServer).GetDocument(ctx, req.(*GetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Documents_GetProfileDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServer).GetProfileDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.documents.v2alpha.Documents/GetProfileDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServer).GetProfileDocument(ctx, req.(*GetProfileDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Documents_ChangeProfileDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeProfileDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServer).ChangeProfileDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.documents.v2alpha.Documents/ChangeProfileDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServer).ChangeProfileDocument(ctx, req.(*ChangeProfileDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Documents_ListProfileDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProfileDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServer).ListProfileDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.documents.v2alpha.Documents/ListProfileDocuments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServer).ListProfileDocuments(ctx, req.(*ListProfileDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Documents_GetDocumentIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServer).GetDocumentIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.documents.v2alpha.Documents/GetDocumentIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServer).GetDocumentIndex(ctx, req.(*GetDocumentIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Documents_ChangeDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServer).ChangeDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.documents.v2alpha.Documents/ChangeDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServer).ChangeDocument(ctx, req.(*ChangeDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Documents_ListDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServer).ListDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.documents.v2alpha.Documents/ListDocuments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServer).ListDocuments(ctx, req.(*ListDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Documents_ListDocumentBranches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDocumentBranchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServer).ListDocumentBranches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.documents.v2alpha.Documents/ListDocumentBranches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServer).ListDocumentBranches(ctx, req.(*ListDocumentBranchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Documents_PushDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServer).PushDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.documents.v2alpha.Documents/PushDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServer).PushDocument(ctx, req.(*PushDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Documents_ListAccountDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServer).ListAccountDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.documents.v2alpha.Documents/ListAccountDocuments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServer).ListAccountDocuments(ctx, req.(*ListAccountDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Documents_ServiceDesc is the grpc.ServiceDesc for Documents service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Documents_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.seed.documents.v2alpha.Documents",
	HandlerType: (*DocumentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDocument",
			Handler:    _Documents_GetDocument_Handler,
		},
		{
			MethodName: "GetProfileDocument",
			Handler:    _Documents_GetProfileDocument_Handler,
		},
		{
			MethodName: "ChangeProfileDocument",
			Handler:    _Documents_ChangeProfileDocument_Handler,
		},
		{
			MethodName: "ListProfileDocuments",
			Handler:    _Documents_ListProfileDocuments_Handler,
		},
		{
			MethodName: "GetDocumentIndex",
			Handler:    _Documents_GetDocumentIndex_Handler,
		},
		{
			MethodName: "ChangeDocument",
			Handler:    _Documents_ChangeDocument_Handler,
		},
		{
			MethodName: "ListDocuments",
			Handler:    _Documents_ListDocuments_Handler,
		},
		{
			MethodName: "ListDocumentBranches",
			Handler:    _Documents_ListDocumentBranches_Handler,
		},
		{
			MethodName: "PushDocument",
			Handler:    _Documents_PushDocument_Handler,
		},
		{
			MethodName: "ListAccountDocuments",
			Handler:    _Documents_ListAccountDocuments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "documents/v2alpha/documents.proto",
}

// MergeClient is the client API for Merge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MergeClient interface {
	// Merge changes and publishes.
	MergeChanges(ctx context.Context, in *MergeChangesRequest, opts ...grpc.CallOption) (*Document, error)
	// Rebase changes
	RebaseChanges(ctx context.Context, in *RebaseChangesRequest, opts ...grpc.CallOption) (*Document, error)
}

type mergeClient struct {
	cc grpc.ClientConnInterface
}

func NewMergeClient(cc grpc.ClientConnInterface) MergeClient {
	return &mergeClient{cc}
}

func (c *mergeClient) MergeChanges(ctx context.Context, in *MergeChangesRequest, opts ...grpc.CallOption) (*Document, error) {
	out := new(Document)
	err := c.cc.Invoke(ctx, "/com.seed.documents.v2alpha.Merge/MergeChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mergeClient) RebaseChanges(ctx context.Context, in *RebaseChangesRequest, opts ...grpc.CallOption) (*Document, error) {
	out := new(Document)
	err := c.cc.Invoke(ctx, "/com.seed.documents.v2alpha.Merge/RebaseChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MergeServer is the server API for Merge service.
// All implementations should embed UnimplementedMergeServer
// for forward compatibility
type MergeServer interface {
	// Merge changes and publishes.
	MergeChanges(context.Context, *MergeChangesRequest) (*Document, error)
	// Rebase changes
	RebaseChanges(context.Context, *RebaseChangesRequest) (*Document, error)
}

// UnimplementedMergeServer should be embedded to have forward compatible implementations.
type UnimplementedMergeServer struct {
}

func (UnimplementedMergeServer) MergeChanges(context.Context, *MergeChangesRequest) (*Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeChanges not implemented")
}
func (UnimplementedMergeServer) RebaseChanges(context.Context, *RebaseChangesRequest) (*Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebaseChanges not implemented")
}

// UnsafeMergeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MergeServer will
// result in compilation errors.
type UnsafeMergeServer interface {
	mustEmbedUnimplementedMergeServer()
}

func RegisterMergeServer(s grpc.ServiceRegistrar, srv MergeServer) {
	s.RegisterService(&Merge_ServiceDesc, srv)
}

func _Merge_MergeChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MergeServer).MergeChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.documents.v2alpha.Merge/MergeChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MergeServer).MergeChanges(ctx, req.(*MergeChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Merge_RebaseChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebaseChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MergeServer).RebaseChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.documents.v2alpha.Merge/RebaseChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MergeServer).RebaseChanges(ctx, req.(*RebaseChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Merge_ServiceDesc is the grpc.ServiceDesc for Merge service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Merge_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.seed.documents.v2alpha.Merge",
	HandlerType: (*MergeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MergeChanges",
			Handler:    _Merge_MergeChanges_Handler,
		},
		{
			MethodName: "RebaseChanges",
			Handler:    _Merge_RebaseChanges_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "documents/v2alpha/documents.proto",
}
