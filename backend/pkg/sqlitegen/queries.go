package sqlitegen

import (
	"bytes"
	"fmt"
	"go/format"
	"strings"
	"text/template"
)

var typeToMethodSuffix = map[Type]string{
	TypeInt:   "Int64",
	TypeFloat: "Float",
	TypeText:  "Text",
	TypeBytes: "Bytes",
}

func CodegenQueries(pkgName string, queries ...QueryTemplate) ([]byte, error) {
	const tplSrc = `
{{define "header" -}}
// Code generated by sqlitegen. DO NOT EDIT.

package {{.PackageName}}

import (
	"fmt"
	"errors"

	"crawshaw.io/sqlite"
	"seed/backend/pkg/sqlitegen"
)

var _ = errors.New
{{end}}

{{define "result-struct"}}
type {{.Name}}Result struct {
	{{- range $out := .Outputs}}
	{{$out}}
	{{- end}}
}
{{end}}

{{define "func-signature"}}func {{.Name}}(conn *sqlite.Conn, {{formatArgs .Inputs}}){{end}}

{{define "query-single"}}
{{template "func-signature" .}} ({{.Name}}Result, error) {
	const query = {{printf "%c%s%c" 96 .SQL 96}}
	
	var out {{.Name}}Result

	before := func(stmt *sqlite.Stmt) {
		{{range $i, $in := .Inputs -}}
		stmt.{{typeMethod "Set" $in.Type}}(":{{$in.Name}}", {{$in.Name}})
		{{end -}}
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("{{.Name}}: more than one result return for a single-kind query")
		}

		{{range $i, $out := .Outputs -}}
		out.{{$out.Name}} = stmt.{{typeMethod "Column" $out.Type}}({{$i}})
		{{end -}}

		return nil
	}

	{{template "exec-stmt" .}}

	return out, err
}
{{end}}

{{define "query-many"}}
{{template "func-signature" .}} ([]{{.Name}}Result, error) {
	const query = {{printf "%c%s%c" 96 .SQL 96}}
	
	var out []{{.Name}}Result

	before := func(stmt *sqlite.Stmt) {
		{{range $i, $in := .Inputs -}}
		stmt.{{typeMethod "Set" $in.Type}}(":{{$in.Name}}", {{$in.Name}})
		{{end -}}
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		out = append(out, {{.Name}}Result{
			{{range $i, $out := .Outputs -}}
			{{$out.Name}}: stmt.{{typeMethod "Column" $out.Type}}({{$i}}),
			{{end -}}
		})

		return nil
	}

	{{template "exec-stmt" .}}

	return out, err
}
{{end}}

{{define "exec-stmt"}}
err := sqlitegen.ExecStmt(conn, query, before, onStep)
if err != nil {
	err = fmt.Errorf("failed query: {{.Name}}: %w", err)
}
{{end}}

{{define "query-exec"}}
{{template "func-signature" .}} error {
	const query = {{printf "%c%s%c" 96 .SQL 96}}

	before := func(stmt *sqlite.Stmt) {
		{{range $i, $in := .Inputs -}}
		stmt.{{typeMethod "Set" $in.Type}}(":{{$in.Name}}", {{$in.Name}})
		{{end -}}
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	{{template "exec-stmt" .}}

	return err
}
{{end}}
`

	tpl, err := template.New("").
		Option("missingkey=error").
		Funcs(map[string]interface{}{
			"formatArgs": func(inputs []GoSymbol) string {
				var b strings.Builder
				for i, in := range inputs {
					b.WriteString(in.String())
					if i < len(inputs)-1 {
						b.WriteString(", ")
					}
				}
				return b.String()
			},
			"inc": func(i int) int { return i + 1 },
			"typeMethod": func(prefix string, t Type) (string, error) {
				suff, ok := typeToMethodSuffix[t]
				if !ok {
					return "", fmt.Errorf("no method suffix for type %v", t)
				}

				return prefix + suff, nil
			},
		}).
		Parse(tplSrc)
	if err != nil {
		return nil, err
	}

	var b bytes.Buffer

	err = tpl.ExecuteTemplate(&b, "header", struct {
		PackageName string
	}{
		PackageName: pkgName,
	})
	if err != nil {
		return nil, err
	}

	for _, qt := range queries {
		if qt.Kind != QueryKindExec {
			if err := tpl.ExecuteTemplate(&b, "result-struct", qt); err != nil {
				return nil, err
			}
		}

		switch qt.Kind {
		case QueryKindSingle:
			if err := tpl.ExecuteTemplate(&b, "query-single", qt); err != nil {
				return nil, err
			}
		case QueryKindMany:
			if err := tpl.ExecuteTemplate(&b, "query-many", qt); err != nil {
				return nil, err
			}
		case QueryKindExec:
			if err := tpl.ExecuteTemplate(&b, "query-exec", qt); err != nil {
				return nil, err
			}
		default:
			panic("unknown query kind for query " + qt.Name)
		}
	}

	code, err := format.Source(b.Bytes())
	if err != nil {
		return nil, err
	}

	return code, nil
}
