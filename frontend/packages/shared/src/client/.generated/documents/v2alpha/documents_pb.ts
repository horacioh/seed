// @generated by protoc-gen-es v1.4.1 with parameter "target=ts,import_extension=none"
// @generated from file documents/v2alpha/documents.proto (package com.seed.documents.v2alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * Relationship between a document and an account
 *
 * @generated from enum com.seed.documents.v2alpha.RoleType
 */
export enum RoleType {
  /**
   * No permissions.
   *
   * @generated from enum value: ROLE_UNSPECIFIED = 0;
   */
  ROLE_UNSPECIFIED = 0,

  /**
   * The role for an owner. All permissions are granted.
   *
   * @generated from enum value: OWNER = 1;
   */
  OWNER = 1,

  /**
   * Allowed to invite/remove writers+collaborators, edit content, and merge suggested changes
   *
   * @generated from enum value: EDITOR = 2;
   */
  EDITOR = 2,

  /**
   * Allowed to change content
   *
   * @generated from enum value: WRITER = 3;
   */
  WRITER = 3,

  /**
   * Their comments and suggested changes will be distributed alongside the document
   *
   * @generated from enum value: COLLABORATOR = 4;
   */
  COLLABORATOR = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(RoleType)
proto3.util.setEnumType(RoleType, "com.seed.documents.v2alpha.RoleType", [
  { no: 0, name: "ROLE_UNSPECIFIED" },
  { no: 1, name: "OWNER" },
  { no: 2, name: "EDITOR" },
  { no: 3, name: "WRITER" },
  { no: 4, name: "COLLABORATOR" },
]);

/**
 * Request to create a new draft for an existing standalone branch
 *
 * @generated from message com.seed.documents.v2alpha.CreateDraftRequest
 */
export class CreateDraftRequest extends Message<CreateDraftRequest> {
  /**
   * Required. ID of the document branch that will be updated.
   *
   * @generated from field: string document_id = 1;
   */
  documentId = "";

  constructor(data?: PartialMessage<CreateDraftRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.CreateDraftRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "document_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDraftRequest {
    return new CreateDraftRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDraftRequest {
    return new CreateDraftRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDraftRequest {
    return new CreateDraftRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateDraftRequest | PlainMessage<CreateDraftRequest> | undefined, b: CreateDraftRequest | PlainMessage<CreateDraftRequest> | undefined): boolean {
    return proto3.util.equals(CreateDraftRequest, a, b);
  }
}

/**
 * Request to create a draft for a new standalone branch, optionally based on an existing document.
 *
 * @generated from message com.seed.documents.v2alpha.CreateBranchDraftRequest
 */
export class CreateBranchDraftRequest extends Message<CreateBranchDraftRequest> {
  /**
   * Optional. Document which will be branched from. If not specified, a new document will be created.
   *
   * @generated from field: string document_id = 1;
   */
  documentId = "";

  /**
   * Optional. Version of the existing document to create draft from.
   * If version is specified, document_id must also be specified.
   *
   * @generated from field: string version = 2;
   */
  version = "";

  constructor(data?: PartialMessage<CreateBranchDraftRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.CreateBranchDraftRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "document_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateBranchDraftRequest {
    return new CreateBranchDraftRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateBranchDraftRequest {
    return new CreateBranchDraftRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateBranchDraftRequest {
    return new CreateBranchDraftRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateBranchDraftRequest | PlainMessage<CreateBranchDraftRequest> | undefined, b: CreateBranchDraftRequest | PlainMessage<CreateBranchDraftRequest> | undefined): boolean {
    return proto3.util.equals(CreateBranchDraftRequest, a, b);
  }
}

/**
 * Request to create a new branch which will be saved to the index of another document.
 * If this path already exists in the parent, the index will be updated when the draft is published.
 * If this path does not exist in the parent, the index will be created when the draft is published.
 *
 * @generated from message com.seed.documents.v2alpha.CreateIndexDraftRequest
 */
export class CreateIndexDraftRequest extends Message<CreateIndexDraftRequest> {
  /**
   * Required. ID of the parent document.
   *
   * @generated from field: string document_id = 1;
   */
  documentId = "";

  /**
   * Required. Path of the document to create a draft for. May include slashes to represent a deep index.
   *
   * @generated from field: string path = 2;
   */
  path = "";

  constructor(data?: PartialMessage<CreateIndexDraftRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.CreateIndexDraftRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "document_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateIndexDraftRequest {
    return new CreateIndexDraftRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateIndexDraftRequest {
    return new CreateIndexDraftRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateIndexDraftRequest {
    return new CreateIndexDraftRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateIndexDraftRequest | PlainMessage<CreateIndexDraftRequest> | undefined, b: CreateIndexDraftRequest | PlainMessage<CreateIndexDraftRequest> | undefined): boolean {
    return proto3.util.equals(CreateIndexDraftRequest, a, b);
  }
}

/**
 * Request to create a draft for a profile document.
 *
 * @generated from message com.seed.documents.v2alpha.CreateProfileDraftRequest
 */
export class CreateProfileDraftRequest extends Message<CreateProfileDraftRequest> {
  /**
   * Required. Account ID to create a profile draft for.
   *
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  constructor(data?: PartialMessage<CreateProfileDraftRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.CreateProfileDraftRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateProfileDraftRequest {
    return new CreateProfileDraftRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateProfileDraftRequest {
    return new CreateProfileDraftRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateProfileDraftRequest {
    return new CreateProfileDraftRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateProfileDraftRequest | PlainMessage<CreateProfileDraftRequest> | undefined, b: CreateProfileDraftRequest | PlainMessage<CreateProfileDraftRequest> | undefined): boolean {
    return proto3.util.equals(CreateProfileDraftRequest, a, b);
  }
}

/**
 * Request to delete an existing draft.
 *
 * @generated from message com.seed.documents.v2alpha.DeleteDraftRequest
 */
export class DeleteDraftRequest extends Message<DeleteDraftRequest> {
  /**
   * Required. ID of the draft to delete.
   *
   * @generated from field: string draft_id = 1;
   */
  draftId = "";

  constructor(data?: PartialMessage<DeleteDraftRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.DeleteDraftRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "draft_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteDraftRequest {
    return new DeleteDraftRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteDraftRequest {
    return new DeleteDraftRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteDraftRequest {
    return new DeleteDraftRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteDraftRequest | PlainMessage<DeleteDraftRequest> | undefined, b: DeleteDraftRequest | PlainMessage<DeleteDraftRequest> | undefined): boolean {
    return proto3.util.equals(DeleteDraftRequest, a, b);
  }
}

/**
 * Request to get a single draft.
 *
 * @generated from message com.seed.documents.v2alpha.GetDraftRequest
 */
export class GetDraftRequest extends Message<GetDraftRequest> {
  /**
   * Required. ID of the draft that was previously created.
   *
   * @generated from field: string draft_id = 1;
   */
  draftId = "";

  constructor(data?: PartialMessage<GetDraftRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.GetDraftRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "draft_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDraftRequest {
    return new GetDraftRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDraftRequest {
    return new GetDraftRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDraftRequest {
    return new GetDraftRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDraftRequest | PlainMessage<GetDraftRequest> | undefined, b: GetDraftRequest | PlainMessage<GetDraftRequest> | undefined): boolean {
    return proto3.util.equals(GetDraftRequest, a, b);
  }
}

/**
 * Request the draft for an account's profile document
 *
 * @generated from message com.seed.documents.v2alpha.GetProfileDraftRequest
 */
export class GetProfileDraftRequest extends Message<GetProfileDraftRequest> {
  /**
   * Required. Account ID to get the profile draft for.
   *
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  constructor(data?: PartialMessage<GetProfileDraftRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.GetProfileDraftRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProfileDraftRequest {
    return new GetProfileDraftRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProfileDraftRequest {
    return new GetProfileDraftRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProfileDraftRequest {
    return new GetProfileDraftRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetProfileDraftRequest | PlainMessage<GetProfileDraftRequest> | undefined, b: GetProfileDraftRequest | PlainMessage<GetProfileDraftRequest> | undefined): boolean {
    return proto3.util.equals(GetProfileDraftRequest, a, b);
  }
}

/**
 * Request to update an existing draft using granular operations.
 *
 * @generated from message com.seed.documents.v2alpha.UpdateDraftRequest
 */
export class UpdateDraftRequest extends Message<UpdateDraftRequest> {
  /**
   * ID of the document to be updated.
   *
   * @generated from field: string document_id = 3;
   */
  documentId = "";

  /**
   * List of document changes that must be applied to the existing document.
   *
   * @generated from field: repeated com.seed.documents.v2alpha.DocumentChange changes = 4;
   */
  changes: DocumentChange[] = [];

  constructor(data?: PartialMessage<UpdateDraftRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.UpdateDraftRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "document_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "changes", kind: "message", T: DocumentChange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateDraftRequest {
    return new UpdateDraftRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateDraftRequest {
    return new UpdateDraftRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateDraftRequest {
    return new UpdateDraftRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateDraftRequest | PlainMessage<UpdateDraftRequest> | undefined, b: UpdateDraftRequest | PlainMessage<UpdateDraftRequest> | undefined): boolean {
    return proto3.util.equals(UpdateDraftRequest, a, b);
  }
}

/**
 * Response after draft is updated.
 *
 * @generated from message com.seed.documents.v2alpha.UpdateDraftResponse
 */
export class UpdateDraftResponse extends Message<UpdateDraftResponse> {
  /**
   * The ID of the change representing the draft version after the update is processed.
   *
   * @generated from field: string change_id = 1;
   */
  changeId = "";

  /**
   * The state of the document after the update.
   *
   * @generated from field: com.seed.documents.v2alpha.Document updated_document = 2;
   */
  updatedDocument?: Document;

  constructor(data?: PartialMessage<UpdateDraftResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.UpdateDraftResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "change_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "updated_document", kind: "message", T: Document },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateDraftResponse {
    return new UpdateDraftResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateDraftResponse {
    return new UpdateDraftResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateDraftResponse {
    return new UpdateDraftResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateDraftResponse | PlainMessage<UpdateDraftResponse> | undefined, b: UpdateDraftResponse | PlainMessage<UpdateDraftResponse> | undefined): boolean {
    return proto3.util.equals(UpdateDraftResponse, a, b);
  }
}

/**
 * Granular document change.
 *
 * @generated from message com.seed.documents.v2alpha.DocumentChange
 */
export class DocumentChange extends Message<DocumentChange> {
  /**
   * @generated from oneof com.seed.documents.v2alpha.DocumentChange.op
   */
  op: {
    /**
     * New metadata to set on the document.
     *
     * @generated from field: com.seed.documents.v2alpha.DocumentChange.SetMetadata set_metadata = 1;
     */
    value: DocumentChange_SetMetadata;
    case: "setMetadata";
  } | {
    /**
     * New index to set on the document.
     *
     * @generated from field: com.seed.documents.v2alpha.DocumentChange.SetIndex set_index = 2;
     */
    value: DocumentChange_SetIndex;
    case: "setIndex";
  } | {
    /**
     * Move operation that creates/moves a block within the document hierarchy.
     *
     * @generated from field: com.seed.documents.v2alpha.DocumentChange.MoveBlock move_block = 3;
     */
    value: DocumentChange_MoveBlock;
    case: "moveBlock";
  } | {
    /**
     * New block state that replaces an existing block.
     *
     * @generated from field: com.seed.documents.v2alpha.Block replace_block = 4;
     */
    value: Block;
    case: "replaceBlock";
  } | {
    /**
     * ID of a block to delete.
     *
     * @generated from field: string delete_block = 5;
     */
    value: string;
    case: "deleteBlock";
  } | {
    /**
     * Update membership for an account on this document.
     *
     * @generated from field: com.seed.documents.v2alpha.DocumentChange.UpdateMember update_member = 6;
     */
    value: DocumentChange_UpdateMember;
    case: "updateMember";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<DocumentChange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.DocumentChange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "set_metadata", kind: "message", T: DocumentChange_SetMetadata, oneof: "op" },
    { no: 2, name: "set_index", kind: "message", T: DocumentChange_SetIndex, oneof: "op" },
    { no: 3, name: "move_block", kind: "message", T: DocumentChange_MoveBlock, oneof: "op" },
    { no: 4, name: "replace_block", kind: "message", T: Block, oneof: "op" },
    { no: 5, name: "delete_block", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "op" },
    { no: 6, name: "update_member", kind: "message", T: DocumentChange_UpdateMember, oneof: "op" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DocumentChange {
    return new DocumentChange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DocumentChange {
    return new DocumentChange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DocumentChange {
    return new DocumentChange().fromJsonString(jsonString, options);
  }

  static equals(a: DocumentChange | PlainMessage<DocumentChange> | undefined, b: DocumentChange | PlainMessage<DocumentChange> | undefined): boolean {
    return proto3.util.equals(DocumentChange, a, b);
  }
}

/**
 * Operation to move an existing block to a different place in the document.
 * Move and Create operations are both expressed with this.
 * Conceptually new blocks are moved out of nowhere into the document.
 *
 * @generated from message com.seed.documents.v2alpha.DocumentChange.MoveBlock
 */
export class DocumentChange_MoveBlock extends Message<DocumentChange_MoveBlock> {
  /**
   * ID of the block to move.
   *
   * @generated from field: string block_id = 1;
   */
  blockId = "";

  /**
   * ID of the new parent for the block being moved.
   *
   * @generated from field: string parent = 2;
   */
  parent = "";

  /**
   * ID of the new left sibling for the block being moved.
   *
   * @generated from field: string left_sibling = 3;
   */
  leftSibling = "";

  constructor(data?: PartialMessage<DocumentChange_MoveBlock>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.DocumentChange.MoveBlock";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "block_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "left_sibling", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DocumentChange_MoveBlock {
    return new DocumentChange_MoveBlock().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DocumentChange_MoveBlock {
    return new DocumentChange_MoveBlock().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DocumentChange_MoveBlock {
    return new DocumentChange_MoveBlock().fromJsonString(jsonString, options);
  }

  static equals(a: DocumentChange_MoveBlock | PlainMessage<DocumentChange_MoveBlock> | undefined, b: DocumentChange_MoveBlock | PlainMessage<DocumentChange_MoveBlock> | undefined): boolean {
    return proto3.util.equals(DocumentChange_MoveBlock, a, b);
  }
}

/**
 * Operation to replace a metadata field with a new value
 *
 * @generated from message com.seed.documents.v2alpha.DocumentChange.SetMetadata
 */
export class DocumentChange_SetMetadata extends Message<DocumentChange_SetMetadata> {
  /**
   * Metadata key to set.
   *
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * Metadata value to set.
   *
   * "ipfs://ABC" - Use CID as reference material
   * "hm://DOC_ID" - Document ID as reference material
   * other random data
   * "https://example.com"
   * DATE FORMAT
   *
   * @generated from field: string value = 2;
   */
  value = "";

  constructor(data?: PartialMessage<DocumentChange_SetMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.DocumentChange.SetMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DocumentChange_SetMetadata {
    return new DocumentChange_SetMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DocumentChange_SetMetadata {
    return new DocumentChange_SetMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DocumentChange_SetMetadata {
    return new DocumentChange_SetMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: DocumentChange_SetMetadata | PlainMessage<DocumentChange_SetMetadata> | undefined, b: DocumentChange_SetMetadata | PlainMessage<DocumentChange_SetMetadata> | undefined): boolean {
    return proto3.util.equals(DocumentChange_SetMetadata, a, b);
  }
}

/**
 * Operation to replace an index field with a new value
 *
 * @generated from message com.seed.documents.v2alpha.DocumentChange.SetIndex
 */
export class DocumentChange_SetIndex extends Message<DocumentChange_SetIndex> {
  /**
   * Index key to set.
   *
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * Index value to set.
   *
   * example values
   * "DOC_ID"
   * "@CHANGE_ID"
   * "@CHANGE_ID.CHANGE_ID2"
   * "#FRAGMENT"
   * "a/ACCOUNT_ID"
   *
   * @generated from field: string value = 2;
   */
  value = "";

  constructor(data?: PartialMessage<DocumentChange_SetIndex>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.DocumentChange.SetIndex";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DocumentChange_SetIndex {
    return new DocumentChange_SetIndex().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DocumentChange_SetIndex {
    return new DocumentChange_SetIndex().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DocumentChange_SetIndex {
    return new DocumentChange_SetIndex().fromJsonString(jsonString, options);
  }

  static equals(a: DocumentChange_SetIndex | PlainMessage<DocumentChange_SetIndex> | undefined, b: DocumentChange_SetIndex | PlainMessage<DocumentChange_SetIndex> | undefined): boolean {
    return proto3.util.equals(DocumentChange_SetIndex, a, b);
  }
}

/**
 * Operation to change membership
 *
 * @generated from message com.seed.documents.v2alpha.DocumentChange.UpdateMember
 */
export class DocumentChange_UpdateMember extends Message<DocumentChange_UpdateMember> {
  /**
   * Account ID to update the role for.
   *
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  /**
   * New role to set for the account.
   *
   * @generated from field: com.seed.documents.v2alpha.RoleType role = 2;
   */
  role = RoleType.ROLE_UNSPECIFIED;

  constructor(data?: PartialMessage<DocumentChange_UpdateMember>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.DocumentChange.UpdateMember";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "role", kind: "enum", T: proto3.getEnumType(RoleType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DocumentChange_UpdateMember {
    return new DocumentChange_UpdateMember().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DocumentChange_UpdateMember {
    return new DocumentChange_UpdateMember().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DocumentChange_UpdateMember {
    return new DocumentChange_UpdateMember().fromJsonString(jsonString, options);
  }

  static equals(a: DocumentChange_UpdateMember | PlainMessage<DocumentChange_UpdateMember> | undefined, b: DocumentChange_UpdateMember | PlainMessage<DocumentChange_UpdateMember> | undefined): boolean {
    return proto3.util.equals(DocumentChange_UpdateMember, a, b);
  }
}

/**
 * Request to list stored drafts.
 *
 * @generated from message com.seed.documents.v2alpha.ListDraftsRequest
 */
export class ListDraftsRequest extends Message<ListDraftsRequest> {
  /**
   * Optional. Number of results per page.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  /**
   * Optional. Token for the page to return.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListDraftsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.ListDraftsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDraftsRequest {
    return new ListDraftsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDraftsRequest {
    return new ListDraftsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDraftsRequest {
    return new ListDraftsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListDraftsRequest | PlainMessage<ListDraftsRequest> | undefined, b: ListDraftsRequest | PlainMessage<ListDraftsRequest> | undefined): boolean {
    return proto3.util.equals(ListDraftsRequest, a, b);
  }
}

/**
 * Response for listing drafts.
 *
 * @generated from message com.seed.documents.v2alpha.ListDraftsResponse
 */
export class ListDraftsResponse extends Message<ListDraftsResponse> {
  /**
   * Drafts matching the list request.
   * Content is omitted.
   *
   * @generated from field: repeated com.seed.documents.v2alpha.Document documents = 1;
   */
  documents: Document[] = [];

  /**
   * Token for the next page if there's any.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListDraftsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.ListDraftsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "documents", kind: "message", T: Document, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDraftsResponse {
    return new ListDraftsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDraftsResponse {
    return new ListDraftsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDraftsResponse {
    return new ListDraftsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListDraftsResponse | PlainMessage<ListDraftsResponse> | undefined, b: ListDraftsResponse | PlainMessage<ListDraftsResponse> | undefined): boolean {
    return proto3.util.equals(ListDraftsResponse, a, b);
  }
}

/**
 * Request to list document drafts.
 *
 * @generated from message com.seed.documents.v2alpha.ListDocumentDraftsRequest
 */
export class ListDocumentDraftsRequest extends Message<ListDocumentDraftsRequest> {
  /**
   * ID of the document to list drafts for.
   *
   * @generated from field: string document_id = 1;
   */
  documentId = "";

  constructor(data?: PartialMessage<ListDocumentDraftsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.ListDocumentDraftsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "document_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDocumentDraftsRequest {
    return new ListDocumentDraftsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDocumentDraftsRequest {
    return new ListDocumentDraftsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDocumentDraftsRequest {
    return new ListDocumentDraftsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListDocumentDraftsRequest | PlainMessage<ListDocumentDraftsRequest> | undefined, b: ListDocumentDraftsRequest | PlainMessage<ListDocumentDraftsRequest> | undefined): boolean {
    return proto3.util.equals(ListDocumentDraftsRequest, a, b);
  }
}

/**
 * Response with the list of drafts for a given document ID.
 *
 * @generated from message com.seed.documents.v2alpha.ListDocumentDraftsResponse
 */
export class ListDocumentDraftsResponse extends Message<ListDocumentDraftsResponse> {
  /**
   * Drafts come without content, only metadata,
   * similar to the rest of list responses.
   *
   * @generated from field: repeated com.seed.documents.v2alpha.Document drafts = 1;
   */
  drafts: Document[] = [];

  constructor(data?: PartialMessage<ListDocumentDraftsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.ListDocumentDraftsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "drafts", kind: "message", T: Document, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDocumentDraftsResponse {
    return new ListDocumentDraftsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDocumentDraftsResponse {
    return new ListDocumentDraftsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDocumentDraftsResponse {
    return new ListDocumentDraftsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListDocumentDraftsResponse | PlainMessage<ListDocumentDraftsResponse> | undefined, b: ListDocumentDraftsResponse | PlainMessage<ListDocumentDraftsResponse> | undefined): boolean {
    return proto3.util.equals(ListDocumentDraftsResponse, a, b);
  }
}

/**
 * Request to publish a draft.
 *
 * @generated from message com.seed.documents.v2alpha.PublishDraftRequest
 */
export class PublishDraftRequest extends Message<PublishDraftRequest> {
  /**
   * ID of the draft to be published.
   *
   * @generated from field: string draft_id = 1;
   */
  draftId = "";

  constructor(data?: PartialMessage<PublishDraftRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.PublishDraftRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "draft_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishDraftRequest {
    return new PublishDraftRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishDraftRequest {
    return new PublishDraftRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishDraftRequest {
    return new PublishDraftRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PublishDraftRequest | PlainMessage<PublishDraftRequest> | undefined, b: PublishDraftRequest | PlainMessage<PublishDraftRequest> | undefined): boolean {
    return proto3.util.equals(PublishDraftRequest, a, b);
  }
}

/**
 * Request for getting a single document.
 *
 * @generated from message com.seed.documents.v2alpha.GetDocumentRequest
 */
export class GetDocumentRequest extends Message<GetDocumentRequest> {
  /**
   * Required. ID of the published document.
   *
   * @generated from field: string document_id = 1;
   */
  documentId = "";

  /**
   * Optional. Specific version of the published document. If empty, the latest one is returned.
   *
   * @generated from field: string version = 2;
   */
  version = "";

  constructor(data?: PartialMessage<GetDocumentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.GetDocumentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "document_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDocumentRequest {
    return new GetDocumentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDocumentRequest {
    return new GetDocumentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDocumentRequest {
    return new GetDocumentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDocumentRequest | PlainMessage<GetDocumentRequest> | undefined, b: GetDocumentRequest | PlainMessage<GetDocumentRequest> | undefined): boolean {
    return proto3.util.equals(GetDocumentRequest, a, b);
  }
}

/**
 * Request for getting an account's profile document.
 *
 * @generated from message com.seed.documents.v2alpha.GetProfileDocumentRequest
 */
export class GetProfileDocumentRequest extends Message<GetProfileDocumentRequest> {
  /**
   * Required. ID of the account.
   *
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  /**
   * Optional. Specific version of the profile. If empty, the latest one is returned.
   *
   * @generated from field: string version = 2;
   */
  version = "";

  constructor(data?: PartialMessage<GetProfileDocumentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.GetProfileDocumentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProfileDocumentRequest {
    return new GetProfileDocumentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProfileDocumentRequest {
    return new GetProfileDocumentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProfileDocumentRequest {
    return new GetProfileDocumentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetProfileDocumentRequest | PlainMessage<GetProfileDocumentRequest> | undefined, b: GetProfileDocumentRequest | PlainMessage<GetProfileDocumentRequest> | undefined): boolean {
    return proto3.util.equals(GetProfileDocumentRequest, a, b);
  }
}

/**
 * Used to request the document within the indexes of other documents
 *
 * @generated from message com.seed.documents.v2alpha.GetDocumentIndexRequest
 */
export class GetDocumentIndexRequest extends Message<GetDocumentIndexRequest> {
  /**
   * the parent document ID
   *
   * @generated from field: string document_id = 1;
   */
  documentId = "";

  /**
   * the path of the document which will be retrieved. may include slashes to represent a deep index
   *
   * @generated from field: string path = 2;
   */
  path = "";

  constructor(data?: PartialMessage<GetDocumentIndexRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.GetDocumentIndexRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "document_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDocumentIndexRequest {
    return new GetDocumentIndexRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDocumentIndexRequest {
    return new GetDocumentIndexRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDocumentIndexRequest {
    return new GetDocumentIndexRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDocumentIndexRequest | PlainMessage<GetDocumentIndexRequest> | undefined, b: GetDocumentIndexRequest | PlainMessage<GetDocumentIndexRequest> | undefined): boolean {
    return proto3.util.equals(GetDocumentIndexRequest, a, b);
  }
}

/**
 * @generated from message com.seed.documents.v2alpha.GetDocumentIndexResponse
 */
export class GetDocumentIndexResponse extends Message<GetDocumentIndexResponse> {
  /**
   * id of the parent document
   *
   * @generated from field: string document_id = 1;
   */
  documentId = "";

  /**
   * version of the parent document
   *
   * @generated from field: string version = 2;
   */
  version = "";

  /**
   * path of the child document. may include slashes to represent a deep index
   *
   * @generated from field: string path = 3;
   */
  path = "";

  /**
   * the document at the given path
   *
   * @generated from field: com.seed.documents.v2alpha.Document document = 4;
   */
  document?: Document;

  constructor(data?: PartialMessage<GetDocumentIndexResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.GetDocumentIndexResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "document_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "document", kind: "message", T: Document },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDocumentIndexResponse {
    return new GetDocumentIndexResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDocumentIndexResponse {
    return new GetDocumentIndexResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDocumentIndexResponse {
    return new GetDocumentIndexResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDocumentIndexResponse | PlainMessage<GetDocumentIndexResponse> | undefined, b: GetDocumentIndexResponse | PlainMessage<GetDocumentIndexResponse> | undefined): boolean {
    return proto3.util.equals(GetDocumentIndexResponse, a, b);
  }
}

/**
 * @generated from message com.seed.documents.v2alpha.ChangeDocumentRequest
 */
export class ChangeDocumentRequest extends Message<ChangeDocumentRequest> {
  /**
   * Required. ID of the document to be updated.
   *
   * @generated from field: string document_id = 1;
   */
  documentId = "";

  /**
   * Required. Changes to be applied to the document.
   *
   * @generated from field: repeated com.seed.documents.v2alpha.DocumentChange changes = 2;
   */
  changes: DocumentChange[] = [];

  constructor(data?: PartialMessage<ChangeDocumentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.ChangeDocumentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "document_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "changes", kind: "message", T: DocumentChange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeDocumentRequest {
    return new ChangeDocumentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeDocumentRequest {
    return new ChangeDocumentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeDocumentRequest {
    return new ChangeDocumentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeDocumentRequest | PlainMessage<ChangeDocumentRequest> | undefined, b: ChangeDocumentRequest | PlainMessage<ChangeDocumentRequest> | undefined): boolean {
    return proto3.util.equals(ChangeDocumentRequest, a, b);
  }
}

/**
 * @generated from message com.seed.documents.v2alpha.ChangeProfileDocumentRequest
 */
export class ChangeProfileDocumentRequest extends Message<ChangeProfileDocumentRequest> {
  /**
   * Required. Account ID to update the profile document for.
   *
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  /**
   * Required. Changes to be applied to the profile document.
   *
   * @generated from field: repeated com.seed.documents.v2alpha.DocumentChange changes = 2;
   */
  changes: DocumentChange[] = [];

  constructor(data?: PartialMessage<ChangeProfileDocumentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.ChangeProfileDocumentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "changes", kind: "message", T: DocumentChange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeProfileDocumentRequest {
    return new ChangeProfileDocumentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeProfileDocumentRequest {
    return new ChangeProfileDocumentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeProfileDocumentRequest {
    return new ChangeProfileDocumentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeProfileDocumentRequest | PlainMessage<ChangeProfileDocumentRequest> | undefined, b: ChangeProfileDocumentRequest | PlainMessage<ChangeProfileDocumentRequest> | undefined): boolean {
    return proto3.util.equals(ChangeProfileDocumentRequest, a, b);
  }
}

/**
 * Request for getting a single document.
 *
 * @generated from message com.seed.documents.v2alpha.PushDocumentRequest
 */
export class PushDocumentRequest extends Message<PushDocumentRequest> {
  /**
   * Required. ID of the published document to be pushed.
   *
   * @generated from field: string document_id = 1;
   */
  documentId = "";

  /**
   * Required. URL of the gateway to push to. Multiaddress format accepted (comma separated).
   *
   * @generated from field: string url = 2;
   */
  url = "";

  constructor(data?: PartialMessage<PushDocumentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.PushDocumentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "document_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PushDocumentRequest {
    return new PushDocumentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PushDocumentRequest {
    return new PushDocumentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PushDocumentRequest {
    return new PushDocumentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PushDocumentRequest | PlainMessage<PushDocumentRequest> | undefined, b: PushDocumentRequest | PlainMessage<PushDocumentRequest> | undefined): boolean {
    return proto3.util.equals(PushDocumentRequest, a, b);
  }
}

/**
 * Request for listing documents.
 *
 * @generated from message com.seed.documents.v2alpha.ListDocumentsRequest
 */
export class ListDocumentsRequest extends Message<ListDocumentsRequest> {
  /**
   * Optional. Number of results per page. Default is defined by the server.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  /**
   * Optional. Value from next_page_token obtains from a previous response.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListDocumentsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.ListDocumentsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDocumentsRequest {
    return new ListDocumentsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDocumentsRequest {
    return new ListDocumentsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDocumentsRequest {
    return new ListDocumentsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListDocumentsRequest | PlainMessage<ListDocumentsRequest> | undefined, b: ListDocumentsRequest | PlainMessage<ListDocumentsRequest> | undefined): boolean {
    return proto3.util.equals(ListDocumentsRequest, a, b);
  }
}

/**
 * Response with list of documents.
 *
 * @generated from message com.seed.documents.v2alpha.ListDocumentsResponse
 */
export class ListDocumentsResponse extends Message<ListDocumentsResponse> {
  /**
   * List of documents matching the request.
   * Only most recent versions are returned.
   * Content is omitted, only metadata is present.
   *
   * @generated from field: repeated com.seed.documents.v2alpha.Document documents = 1;
   */
  documents: Document[] = [];

  /**
   * Token for the next page if there're more results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListDocumentsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.ListDocumentsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "documents", kind: "message", T: Document, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDocumentsResponse {
    return new ListDocumentsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDocumentsResponse {
    return new ListDocumentsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDocumentsResponse {
    return new ListDocumentsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListDocumentsResponse | PlainMessage<ListDocumentsResponse> | undefined, b: ListDocumentsResponse | PlainMessage<ListDocumentsResponse> | undefined): boolean {
    return proto3.util.equals(ListDocumentsResponse, a, b);
  }
}

/**
 * @generated from message com.seed.documents.v2alpha.ListDocumentBranchesRequest
 */
export class ListDocumentBranchesRequest extends Message<ListDocumentBranchesRequest> {
  /**
   * Required. ID of the document to list branches for.
   *
   * @generated from field: string document_id = 1;
   */
  documentId = "";

  constructor(data?: PartialMessage<ListDocumentBranchesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.ListDocumentBranchesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "document_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDocumentBranchesRequest {
    return new ListDocumentBranchesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDocumentBranchesRequest {
    return new ListDocumentBranchesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDocumentBranchesRequest {
    return new ListDocumentBranchesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListDocumentBranchesRequest | PlainMessage<ListDocumentBranchesRequest> | undefined, b: ListDocumentBranchesRequest | PlainMessage<ListDocumentBranchesRequest> | undefined): boolean {
    return proto3.util.equals(ListDocumentBranchesRequest, a, b);
  }
}

/**
 * @generated from message com.seed.documents.v2alpha.ListDocumentBranchesResponse
 */
export class ListDocumentBranchesResponse extends Message<ListDocumentBranchesResponse> {
  /**
   * List of branches for the document.
   *
   * @generated from field: repeated com.seed.documents.v2alpha.Branch branches = 1;
   */
  branches: Branch[] = [];

  /**
   * List of drafts for these branches. Includes a draft that will become a draft when published.
   *
   * @generated from field: repeated com.seed.documents.v2alpha.Draft drafts = 2;
   */
  drafts: Draft[] = [];

  constructor(data?: PartialMessage<ListDocumentBranchesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.ListDocumentBranchesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "branches", kind: "message", T: Branch, repeated: true },
    { no: 2, name: "drafts", kind: "message", T: Draft, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDocumentBranchesResponse {
    return new ListDocumentBranchesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDocumentBranchesResponse {
    return new ListDocumentBranchesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDocumentBranchesResponse {
    return new ListDocumentBranchesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListDocumentBranchesResponse | PlainMessage<ListDocumentBranchesResponse> | undefined, b: ListDocumentBranchesResponse | PlainMessage<ListDocumentBranchesResponse> | undefined): boolean {
    return proto3.util.equals(ListDocumentBranchesResponse, a, b);
  }
}

/**
 * @generated from message com.seed.documents.v2alpha.Branch
 */
export class Branch extends Message<Branch> {
  /**
   * ID for use when deleting or publishing the branch
   *
   * @generated from field: string branch_id = 1;
   */
  branchId = "";

  /**
   * ID of the top-level doc which will be updated. For standalone branches this is the doc ID.
   * for index branches this is the parent doc ID.
   *
   * @generated from field: string document_id = 2;
   */
  documentId = "";

  /**
   * the path of the document which is being updated. may include slashes to represent a deep index
   *
   * @generated from field: string path = 3;
   */
  path = "";

  constructor(data?: PartialMessage<Branch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.Branch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "branch_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "document_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Branch {
    return new Branch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Branch {
    return new Branch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Branch {
    return new Branch().fromJsonString(jsonString, options);
  }

  static equals(a: Branch | PlainMessage<Branch> | undefined, b: Branch | PlainMessage<Branch> | undefined): boolean {
    return proto3.util.equals(Branch, a, b);
  }
}

/**
 * Request for listing documents owned by a given account.
 *
 * @generated from message com.seed.documents.v2alpha.ListAccountDocumentsRequest
 */
export class ListAccountDocumentsRequest extends Message<ListAccountDocumentsRequest> {
  /**
   * Optional. Number of results per page. Default is defined by the server.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  /**
   * Optional. Value from next_page_token obtains from a previous response.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  /**
   * Required. Account ID to list documents for.
   *
   * @generated from field: string account_id = 3;
   */
  accountId = "";

  constructor(data?: PartialMessage<ListAccountDocumentsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.ListAccountDocumentsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAccountDocumentsRequest {
    return new ListAccountDocumentsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAccountDocumentsRequest {
    return new ListAccountDocumentsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAccountDocumentsRequest {
    return new ListAccountDocumentsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAccountDocumentsRequest | PlainMessage<ListAccountDocumentsRequest> | undefined, b: ListAccountDocumentsRequest | PlainMessage<ListAccountDocumentsRequest> | undefined): boolean {
    return proto3.util.equals(ListAccountDocumentsRequest, a, b);
  }
}

/**
 * Request for merging changes in a document.
 *
 * @generated from message com.seed.documents.v2alpha.MergeChangesRequest
 */
export class MergeChangesRequest extends Message<MergeChangesRequest> {
  /**
   * Required. Document ID from which versions are going to be taken.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Required. Versions to be merged.
   *
   * @generated from field: repeated string versions = 2;
   */
  versions: string[] = [];

  constructor(data?: PartialMessage<MergeChangesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.MergeChangesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "versions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MergeChangesRequest {
    return new MergeChangesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MergeChangesRequest {
    return new MergeChangesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MergeChangesRequest {
    return new MergeChangesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MergeChangesRequest | PlainMessage<MergeChangesRequest> | undefined, b: MergeChangesRequest | PlainMessage<MergeChangesRequest> | undefined): boolean {
    return proto3.util.equals(MergeChangesRequest, a, b);
  }
}

/**
 * Request for rebasing changes in a document.
 *
 * @generated from message com.seed.documents.v2alpha.RebaseChangesRequest
 */
export class RebaseChangesRequest extends Message<RebaseChangesRequest> {
  /**
   * Required. Draft ID to be rebased.
   *
   * @generated from field: string base_draft_id = 1;
   */
  baseDraftId = "";

  /**
   * Required. Versions to be applied applied on top of the base document.
   *
   * @generated from field: repeated string versions = 3;
   */
  versions: string[] = [];

  constructor(data?: PartialMessage<RebaseChangesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.RebaseChangesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "base_draft_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "versions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RebaseChangesRequest {
    return new RebaseChangesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RebaseChangesRequest {
    return new RebaseChangesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RebaseChangesRequest {
    return new RebaseChangesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RebaseChangesRequest | PlainMessage<RebaseChangesRequest> | undefined, b: RebaseChangesRequest | PlainMessage<RebaseChangesRequest> | undefined): boolean {
    return proto3.util.equals(RebaseChangesRequest, a, b);
  }
}

/**
 * @generated from message com.seed.documents.v2alpha.Draft
 */
export class Draft extends Message<Draft> {
  /**
   * to identify the draft
   *
   * @generated from field: string draft_id = 1;
   */
  draftId = "";

  /**
   * state of the draft
   *
   * @generated from field: com.seed.documents.v2alpha.Document document = 2;
   */
  document?: Document;

  /**
   * True if this is a profile draft
   *
   * @generated from field: bool is_profile = 3;
   */
  isProfile = false;

  /**
   * The top-level entity that this draft will update once published. An Account ID for profile drafts, otherwise Document ID.
   *
   * @generated from field: string entity_id = 4;
   */
  entityId = "";

  /**
   * Optional. The path where the draft will be updated once published
   *
   * @generated from field: string path = 5;
   */
  path = "";

  constructor(data?: PartialMessage<Draft>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.Draft";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "draft_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "document", kind: "message", T: Document },
    { no: 3, name: "is_profile", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "entity_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Draft {
    return new Draft().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Draft {
    return new Draft().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Draft {
    return new Draft().fromJsonString(jsonString, options);
  }

  static equals(a: Draft | PlainMessage<Draft> | undefined, b: Draft | PlainMessage<Draft> | undefined): boolean {
    return proto3.util.equals(Draft, a, b);
  }
}

/**
 * Document represents metadata and content of a document.
 *
 * @generated from message com.seed.documents.v2alpha.Document
 */
export class Document extends Message<Document> {
  /**
   * Permanent ID of the document.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Output only. Owner's Account ID.
   *
   * @generated from field: string owner = 2;
   */
  owner = "";

  /**
   * Metadata values for a document.
   *
   * @generated from field: map<string, string> metadata = 3;
   */
  metadata: { [key: string]: string } = {};

  /**
   * Output only. Set to account ID if this is a profile document.
   *
   * @generated from field: string profile_account_id = 4;
   */
  profileAccountId = "";

  /**
   * Output only. Every account ID who has modified the document.
   * Includes the original author as well.
   *
   * @generated from field: repeated string authors = 5;
   */
  authors: string[] = [];

  /**
   * Blocks content of the document.
   *
   * @generated from field: repeated com.seed.documents.v2alpha.BlockNode content = 6;
   */
  content: BlockNode[] = [];

  /**
   * The indexed children documents under this document.
   * Keys are used as the path names (and slash "/" is not allowed in the key)
   * Values will refer to other documents as exact versions such as "hm://DOC_ID?v=1"
   * Values may refer to "latest" versions with "hm://DOC_ID"
   *
   * @generated from field: map<string, string> index = 7;
   */
  index: { [key: string]: string } = {};

  /**
   * Output only. Time when document was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 8;
   */
  createTime?: Timestamp;

  /**
   * Output only. Time when document was updated.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 9;
   */
  updateTime?: Timestamp;

  /**
   * Output only. Time when this version was published. Not present in drafts.
   *
   * @generated from field: google.protobuf.Timestamp publish_time = 10;
   */
  publishTime?: Timestamp;

  /**
   * Output only. Current version of the document.
   *
   * @generated from field: string version = 11;
   */
  version = "";

  /**
   * Output only. Previous version of the document,
   * Empty if this is the first version.
   *
   * @generated from field: string previous_version = 12;
   */
  previousVersion = "";

  constructor(data?: PartialMessage<Document>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.Document";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 4, name: "profile_account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "authors", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "content", kind: "message", T: BlockNode, repeated: true },
    { no: 7, name: "index", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 8, name: "create_time", kind: "message", T: Timestamp },
    { no: 9, name: "update_time", kind: "message", T: Timestamp },
    { no: 10, name: "publish_time", kind: "message", T: Timestamp },
    { no: 11, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "previous_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Document {
    return new Document().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Document {
    return new Document().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Document {
    return new Document().fromJsonString(jsonString, options);
  }

  static equals(a: Document | PlainMessage<Document> | undefined, b: Document | PlainMessage<Document> | undefined): boolean {
    return proto3.util.equals(Document, a, b);
  }
}

/**
 * Content block with children.
 *
 * @generated from message com.seed.documents.v2alpha.BlockNode
 */
export class BlockNode extends Message<BlockNode> {
  /**
   * Content block.
   *
   * @generated from field: com.seed.documents.v2alpha.Block block = 1;
   */
  block?: Block;

  /**
   * Child blocks.
   *
   * @generated from field: repeated com.seed.documents.v2alpha.BlockNode children = 2;
   */
  children: BlockNode[] = [];

  constructor(data?: PartialMessage<BlockNode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.BlockNode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "block", kind: "message", T: Block },
    { no: 2, name: "children", kind: "message", T: BlockNode, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockNode {
    return new BlockNode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockNode {
    return new BlockNode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockNode {
    return new BlockNode().fromJsonString(jsonString, options);
  }

  static equals(a: BlockNode | PlainMessage<BlockNode> | undefined, b: BlockNode | PlainMessage<BlockNode> | undefined): boolean {
    return proto3.util.equals(BlockNode, a, b);
  }
}

/**
 * Content block.
 *
 * @generated from message com.seed.documents.v2alpha.Block
 */
export class Block extends Message<Block> {
  /**
   * Block ID. Must be unique within the document.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Type of the block. Specific to the renderer.
   *
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * Text of the content block.
   *
   * @generated from field: string text = 3;
   */
  text = "";

  /**
   * Optional. The hyperlink to an external resource.
   * Must be a valid URL.
   *
   * @generated from field: string ref = 7;
   */
  ref = "";

  /**
   * Arbitrary attributes of the block.
   *
   * @generated from field: map<string, string> attributes = 4;
   */
  attributes: { [key: string]: string } = {};

  /**
   * Annotation "layers" of the block.
   *
   * @generated from field: repeated com.seed.documents.v2alpha.Annotation annotations = 5;
   */
  annotations: Annotation[] = [];

  /**
   * Output only. Current revision of the block. It's the ID of the last Change that modified this block.
   * Additional information about the Change can be obtained using the Changes service.
   *
   * @generated from field: string revision = 6;
   */
  revision = "";

  constructor(data?: PartialMessage<Block>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.Block";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "ref", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "attributes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 5, name: "annotations", kind: "message", T: Annotation, repeated: true },
    { no: 6, name: "revision", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Block {
    return new Block().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Block {
    return new Block().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Block {
    return new Block().fromJsonString(jsonString, options);
  }

  static equals(a: Block | PlainMessage<Block> | undefined, b: Block | PlainMessage<Block> | undefined): boolean {
    return proto3.util.equals(Block, a, b);
  }
}

/**
 * Conceptual annotation "layer" that is applied to arbitrary spans of block text.
 * An "identity" of the layer should be derived deterministically based on its type
 * attributes. Spans inside the same annotation can't overlap.
 *
 * Spans are stored inside the Annotation in a "columnar" format,
 * i.e. StructureOfArrays instead of ArrayOfStructures. See: https://en.wikipedia.org/wiki/AoS_and_SoA.
 * This is useful to reduce the number of allocations and offers more compact serialization, because
 * protobuf is able to "pack" primitive repeated fields more efficiently.
 *
 * @generated from message com.seed.documents.v2alpha.Annotation
 */
export class Annotation extends Message<Annotation> {
  /**
   * Type of the annotation.
   *
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * Optional. A hyperlink to an external resource.
   * Must be a valid URL.
   *
   * @generated from field: string ref = 5;
   */
  ref = "";

  /**
   * Arbitrary key-value attributes of the annotation.
   *
   * @generated from field: map<string, string> attributes = 2;
   */
  attributes: { [key: string]: string } = {};

  /**
   * Start offsets of possibly disjoint spans of text for which this annotation is applied.
   * Must be sorted and have the same number of items as `ends` list.
   *
   * @generated from field: repeated int32 starts = 3;
   */
  starts: number[] = [];

  /**
   * End offsets of possibly disjoint spans of text for which this annotation is applied.
   * Must be sorted and have the same number of items as `starts` list.
   *
   * @generated from field: repeated int32 ends = 4;
   */
  ends: number[] = [];

  constructor(data?: PartialMessage<Annotation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v2alpha.Annotation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "ref", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "attributes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 3, name: "starts", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 4, name: "ends", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Annotation {
    return new Annotation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Annotation {
    return new Annotation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Annotation {
    return new Annotation().fromJsonString(jsonString, options);
  }

  static equals(a: Annotation | PlainMessage<Annotation> | undefined, b: Annotation | PlainMessage<Annotation> | undefined): boolean {
    return proto3.util.equals(Annotation, a, b);
  }
}

