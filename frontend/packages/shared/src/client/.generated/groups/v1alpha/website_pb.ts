// @generated by protoc-gen-es v1.4.1 with parameter "target=ts,import_extension=none"
// @generated from file groups/v1alpha/website.proto (package com.seed.groups.v1alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Request for getting the public site information.
 *
 * @generated from message com.seed.groups.v1alpha.GetSiteInfoRequest
 */
export class GetSiteInfoRequest extends Message<GetSiteInfoRequest> {
  constructor(data?: PartialMessage<GetSiteInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.groups.v1alpha.GetSiteInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSiteInfoRequest {
    return new GetSiteInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSiteInfoRequest {
    return new GetSiteInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSiteInfoRequest {
    return new GetSiteInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSiteInfoRequest | PlainMessage<GetSiteInfoRequest> | undefined, b: GetSiteInfoRequest | PlainMessage<GetSiteInfoRequest> | undefined): boolean {
    return proto3.util.equals(GetSiteInfoRequest, a, b);
  }
}

/**
 * Request for initializing the site.
 *
 * @generated from message com.seed.groups.v1alpha.InitializeServerRequest
 */
export class InitializeServerRequest extends Message<InitializeServerRequest> {
  /**
   * Required. The secret provided during the site deployment process.
   * It's a trust-on-first-use, one-time-use secret that is used for the initial site setup,
   * during which the site remembers the groups that it must serve, and who is the owner of the site.
   *
   * @generated from field: string secret = 1;
   */
  secret = "";

  /**
   * Required. ID of the group that should be served on this site.
   *
   * @generated from field: string group_id = 2;
   */
  groupId = "";

  constructor(data?: PartialMessage<InitializeServerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.groups.v1alpha.InitializeServerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "group_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitializeServerRequest {
    return new InitializeServerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitializeServerRequest {
    return new InitializeServerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitializeServerRequest {
    return new InitializeServerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InitializeServerRequest | PlainMessage<InitializeServerRequest> | undefined, b: InitializeServerRequest | PlainMessage<InitializeServerRequest> | undefined): boolean {
    return proto3.util.equals(InitializeServerRequest, a, b);
  }
}

/**
 * Response for initializing the site.
 *
 * @generated from message com.seed.groups.v1alpha.InitializeServerResponse
 */
export class InitializeServerResponse extends Message<InitializeServerResponse> {
  constructor(data?: PartialMessage<InitializeServerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.groups.v1alpha.InitializeServerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitializeServerResponse {
    return new InitializeServerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitializeServerResponse {
    return new InitializeServerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitializeServerResponse {
    return new InitializeServerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InitializeServerResponse | PlainMessage<InitializeServerResponse> | undefined, b: InitializeServerResponse | PlainMessage<InitializeServerResponse> | undefined): boolean {
    return proto3.util.equals(InitializeServerResponse, a, b);
  }
}

/**
 * Request for publishing blobs.
 *
 * @generated from message com.seed.groups.v1alpha.PublishBlobsRequest
 */
export class PublishBlobsRequest extends Message<PublishBlobsRequest> {
  /**
   * List of blob CIDs that we expect to be available on the site.
   *
   * @generated from field: repeated string blobs = 1;
   */
  blobs: string[] = [];

  constructor(data?: PartialMessage<PublishBlobsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.groups.v1alpha.PublishBlobsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "blobs", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishBlobsRequest {
    return new PublishBlobsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishBlobsRequest {
    return new PublishBlobsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishBlobsRequest {
    return new PublishBlobsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PublishBlobsRequest | PlainMessage<PublishBlobsRequest> | undefined, b: PublishBlobsRequest | PlainMessage<PublishBlobsRequest> | undefined): boolean {
    return proto3.util.equals(PublishBlobsRequest, a, b);
  }
}

/**
 * Response for publishing blobs.
 *
 * @generated from message com.seed.groups.v1alpha.PublishBlobsResponse
 */
export class PublishBlobsResponse extends Message<PublishBlobsResponse> {
  constructor(data?: PartialMessage<PublishBlobsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.groups.v1alpha.PublishBlobsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishBlobsResponse {
    return new PublishBlobsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishBlobsResponse {
    return new PublishBlobsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishBlobsResponse {
    return new PublishBlobsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PublishBlobsResponse | PlainMessage<PublishBlobsResponse> | undefined, b: PublishBlobsResponse | PlainMessage<PublishBlobsResponse> | undefined): boolean {
    return proto3.util.equals(PublishBlobsResponse, a, b);
  }
}

/**
 * Publicly available information about the website.
 *
 * @generated from message com.seed.groups.v1alpha.PublicSiteInfo
 */
export class PublicSiteInfo extends Message<PublicSiteInfo> {
  /**
   * P2P information for the website.
   *
   * @generated from field: com.seed.groups.v1alpha.PeerInfo peer_info = 1;
   */
  peerInfo?: PeerInfo;

  /**
   * Group ID being served on the site.
   * Can be empty if site is not initialized yet.
   *
   * @generated from field: string group_id = 2;
   */
  groupId = "";

  /**
   * Version of the group according to the website server.
   *
   * @generated from field: string group_version = 3;
   */
  groupVersion = "";

  constructor(data?: PartialMessage<PublicSiteInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.groups.v1alpha.PublicSiteInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "peer_info", kind: "message", T: PeerInfo },
    { no: 2, name: "group_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "group_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublicSiteInfo {
    return new PublicSiteInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublicSiteInfo {
    return new PublicSiteInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublicSiteInfo {
    return new PublicSiteInfo().fromJsonString(jsonString, options);
  }

  static equals(a: PublicSiteInfo | PlainMessage<PublicSiteInfo> | undefined, b: PublicSiteInfo | PlainMessage<PublicSiteInfo> | undefined): boolean {
    return proto3.util.equals(PublicSiteInfo, a, b);
  }
}

/**
 * Peer information for P2P network.
 *
 * @generated from message com.seed.groups.v1alpha.PeerInfo
 */
export class PeerInfo extends Message<PeerInfo> {
  /**
   * Libp2p peer ID.
   *
   * @generated from field: string peer_id = 1;
   */
  peerId = "";

  /**
   * Multiaddrs for the peer,
   * without the peer ID,
   * in order to use it with libp2p AddrInfo API.
   *
   * @generated from field: repeated string addrs = 2;
   */
  addrs: string[] = [];

  /**
   * Seed Account ID of the site.
   *
   * @generated from field: string account_id = 3;
   */
  accountId = "";

  constructor(data?: PartialMessage<PeerInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.groups.v1alpha.PeerInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "peer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "addrs", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PeerInfo {
    return new PeerInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PeerInfo {
    return new PeerInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PeerInfo {
    return new PeerInfo().fromJsonString(jsonString, options);
  }

  static equals(a: PeerInfo | PlainMessage<PeerInfo> | undefined, b: PeerInfo | PlainMessage<PeerInfo> | undefined): boolean {
    return proto3.util.equals(PeerInfo, a, b);
  }
}

