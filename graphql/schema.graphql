"""
Built-in directive for Go's gqlgen library.
"""
directive @goModel(
  model: String
  models: [String!]
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

"""
Built-in directive for Go's gqlgen library.
"""
directive @goField(
  forceResolver: Boolean
  name: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

"""
Lightning Network payment request encoded as a string.
Ready to be encoded as a QR code for wallets to scan and pay.
"""
scalar LightningPaymentRequest

"""
Bitcoin amount in sats.
Should be interpreted as a large-enough unsigned integer type.
"""
scalar Satoshis

"""
Top-level queries.
"""
type Query {
  """
  Information about the current user.
  """
  me: Me!

  """
  Information about payments.
  """
  payments(
    walletID: ID!
    excludeUnpaid: Boolean
    excludeKeysend: Boolean
    excludeExpired: Boolean
  ): Payments!
}

"""
Information about the current user.
"""
type Me {
  """
  List configured Lightning wallets.
  """
  wallets: [LightningWallet!] @goField(forceResolver: true)

  """
  Account-wide Lightning addres (lnaddress)
  """
  lnaddress: String @goField(forceResolver: true)
}

"""
Information about payments
"""
type Payments {
  """
  Payments made. They can be unconfirmed
  """
  sent: [Invoice]
  """
  Payments received. They can be unconfirmed
  """
  received: [Invoice]
}

"""
Top-level mutations.
"""
type Mutation {
  """
  Set an existing wallet to be the default one. Initially, the first configured wallet
  automatically becomes the default one.
  """
  setDefaultWallet(input: SetDefaultWalletInput!): SetDefaultWalletPayload!

  """
  Update existing wallet.
  """
  updateWallet(input: UpdateWalletInput!): UpdateWalletPayload!

  """
  Delete existing wallet.
  """
  deleteWallet(input: DeleteWalletInput!): DeleteWalletPayload!

  """
  Export wallet to use it with an external application.
  """
  exportWallet(input: ExportWalletInput!): ExportWalletPayload!

  """
  Import wallet to use it in seed.
  """
  importWallet(input: ImportWalletInput!): ImportWalletPayload!

  """
  Request an invoice from a user. The user can be either a Seed Account ID or a ln address.
  """
  requestInvoice(input: RequestInvoiceInput!): RequestInvoicePayload!

  """
  Pay invoice with a previously configured wallet.
  """
  payInvoice(input: PayInvoiceInput!): PayInvoicePayload!

  """
  Update lnaddress' nickname.
  """
  updateNickname(input: UpdateNicknameInput!): UpdateNicknamePayload!
}

"""
Input for setting the default wallet.
"""
input SetDefaultWalletInput {
  """
  ID of the wallet to become the default one.
  """
  id: ID!
}

"""
Response after setting default wallet.
"""
type SetDefaultWalletPayload {
  """
  The new default wallet.
  """
  wallet: LightningWallet!
}

"""
Input to update Lightning wallets.
"""
input UpdateWalletInput {
  """
  ID of the wallet to be updated.
  """
  id: ID!

  """
  New name for the wallet.
  """
  name: String!
}

"""
Response with the updated wallet.
"""
type UpdateWalletPayload {
  """
  Updated wallet.
  """
  wallet: LightningWallet!
}

"""
Input to delete a wallet.
"""
input DeleteWalletInput {
  """
  ID of the wallet to be deleted.
  """
  id: ID!
}

"""
Response after deleting a wallet.
"""
type DeleteWalletPayload {
  """
  ID of the deleted wallet.
  """
  id: ID!
}

"""
Input to export a wallet.
"""
input ExportWalletInput {
  """
  ID of the wallet to be exported. If empty, the built-in wallet will be exported.
  """
  id: ID!
}

"""
Response after exporting a wallet.
"""
type ExportWalletPayload {
  """
  credentials of the exported wallet.
  """
  credentials: String!
}


"""
Input to export a wallet.
"""
input ImportWalletInput {
  """
  Local name for this wallet.
  """
  name: String!

  """
  Credential string to connect to imported wallet service.
  """
  url: String!
}

"""
Response after exporting a wallet.
"""
type ImportWalletPayload {
  """
  Stored wallet.
  """
  wallet: LightningWallet!
}

"""
Input for requesting an invoice.
"""
input RequestInvoiceInput {
  """
  Seed Account ID or lnaddress we want the invoice from. Can be ourselves.
  """
  user: String!

  """
  Amount in Satoshis the invoice should be created for.
  """
  amountSats: Satoshis!

  """
  Optional description for the invoice.
  """
  memo: String
}

"""
Response with the invoice to pay.
"""
type RequestInvoicePayload {
  """
  Payment request is a string-encoded Lightning Network Payment Request.
  It's ready to be used in a wallet app to pay.
  """
  paymentRequest: LightningPaymentRequest!
}

"""
Input to pay an invoice.
"""
input PayInvoiceInput {
  """
  Previously obtained payment request we want to pay for.
  """
  paymentRequest: LightningPaymentRequest!

  """
  Optional amount in satoshis to pay. In case this is not defined,
  The amount showed in the invoice will be paid. If amountSats is
  provided, then the invoice amount will be override. This will cause
  an error unless both amounts are the same or the invoice amount is 0.
  """
  amountSats: Satoshis

  """
  Optional ID of the wallet to pay with. Otherwise the default one will be used.
  """
  walletID: ID
}

"""
Response after paying an invoice.
"""
type PayInvoicePayload {
  """
  Wallet ID that was used to pay the invoice.
  """
  walletID: ID!
}

"""
Input to update lnaddress' nickname.
"""
input UpdateNicknameInput {
  """
  New nickname to update.
  """
  nickname: String!
}

"""
Response after updating the nickname.
"""
type UpdateNicknamePayload {
  """
  Updated Nickname.
  """
  nickname: String!
}

"""
Common interface for Lightning wallets. We support different types.
"""
interface LightningWallet {
  """
  Globally unique ID of the wallet. Public key.
  """
  id: ID!

  """
  Local-only name of the wallet. For user's convenience.
  """
  name: String!

  """
  Balance in Satoshis.
  """
  balanceSats: Satoshis!

  """
  If this wallet is the default wallet to send/receive automatic payments
  """
  isDefault: Boolean!
}

"""
Lightning wallet compatible with LndHub.
"""
type LndHubWallet implements LightningWallet {
  """
  Globally unique ID of the wallet. Since this type of wallet doesn't have unique addresses
  we decided to use the cryptographic hash of the credentials URL as an ID.
  """
  id: ID!

  """
  URL of the LndHub server this wallet is connected to.
  """
  apiURL: String!

  """
  Name of the wallet.
  """
  name: String!

  """
  Balance in Satoshis.
  """
  balanceSats: Satoshis!

  """
  If this wallet is the default wallet to send/receive automatic payments
  """
  isDefault: Boolean!
}

"""
Lightning Invoices
"""
type Invoice {
  """
  Preimage hash of the payment.
  """
  PaymentHash: String
  """
  Bolt-11 encoded invoice.
  """
  PaymentRequest: String
  """
  Memo field of the invoice.
  """
  Description: String
  """
  Memo hash in case its too long
  """
  DescriptionHash: String
  """
  Invoice secret known at settlement. Proof of payment
  """
  PaymentPreimage: String
  """
  Payee lightning node ID.
  """
  Destination: String
  """
  Invoice quantity in satoshis.
  """
  Amount: Satoshis!
  """
  Fees incurred by the payer when paying the invoice
  """
  Fee: Satoshis
  """
  Status of the invoice. (Settled, in-flight, expired, ...)
  """
  Status: String
  """
  Invoice tyoe
  """
  Type: String
  """
  Error of the invoice
  """
  ErrorMessage: String
  """
  Settlement date
  """
  SettledAt: String
  """
  Expiring date.
  """
  ExpiresAt: String
  """
  If the invoice has been paid or not.
  """
  IsPaid: Boolean
  """
  Whether or not this is a made up invoice corrensponding with a keysend payment
  """
  Keysend: Boolean
}
