syntax = "proto3";

package com.seed.documents.v2alpha;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

option go_package = "seed/backend/genproto/documents/v2alpha;documents";

// === Draft Service ===

// Drafts service exposes the functionality
service Drafts {
  // Creates a new draft of an existing standalone branch
  rpc CreateDraft(CreateDraftRequest) returns (Draft);

  // Creates a draft for a new branch.
  rpc CreateBranchDraft(CreateBranchDraftRequest) returns (Draft);

  // Creates a draft for an index branch. Thows if a draft already exists for this index.
  rpc CreateIndexDraft(CreateIndexDraftRequest) returns (Draft);

  // Create a draft for a profile document. Thows if a draft already exists for this profile.
  rpc CreateProfileDraft(CreateProfileDraftRequest) returns (Draft);

  // Deletes a draft by its document ID.
  rpc DeleteDraft(DeleteDraftRequest) returns (google.protobuf.Empty);

  // Gets a single draft if exists.
  rpc GetDraft(GetDraftRequest) returns (Draft);

  // Gets a draft for a profile document.
  rpc GetProfileDraft(GetProfileDraftRequest) returns (Draft);

  // Updates a draft using granular update operations.
  rpc UpdateDraft(UpdateDraftRequest) returns (UpdateDraftResponse);

  // List currently stored drafts.
  rpc ListDrafts(ListDraftsRequest) returns (ListDraftsResponse);

  // Lists drafts for a given document.
  rpc ListDocumentDrafts(ListDocumentDraftsRequest) returns (ListDocumentDraftsResponse);

  // Publishes a draft. Returns the branch that was published.
  rpc PublishDraft(PublishDraftRequest) returns (Branch);
}

// Request to create a new draft for an existing standalone branch
message CreateDraftRequest {
  // Required. ID of the document branch that will be updated.
  string document_id = 1;
}

// Request to create a draft for a new standalone branch, optionally based on an existing document.
message CreateBranchDraftRequest {
  // Optional. Document which will be branched from. If not specified, a new document will be created.
  string document_id = 1;

  // Optional. Version of the existing document to create draft from.
  // If version is specified, document_id must also be specified.
  string version = 2;
}

// Request to create a new branch which will be saved to the index of another document.
// If this path already exists in the parent, the index will be updated when the draft is published.
// If this path does not exist in the parent, the index will be created when the draft is published.
message CreateIndexDraftRequest {
  // Required. ID of the parent document.
  string document_id = 1;

  // Required. Path of the document to create a draft for. May include slashes to represent a deep index.
  string path = 2;
}

// Request to create a draft for a profile document.
message CreateProfileDraftRequest {
  // Required. Account ID to create a profile draft for.
  string account_id = 1;
}

// Request to delete an existing draft.
message DeleteDraftRequest {
  // Required. ID of the draft to delete.
  string draft_id = 1;
}

// Request to get a single draft.
message GetDraftRequest {
  // Required. ID of the draft that was previously created.
  string draft_id = 1;
}

// Request the draft for an account's profile document
message GetProfileDraftRequest {
  // Required. Account ID to get the profile draft for.
  string account_id = 1;
}

// Request to update an existing draft using granular operations.
message UpdateDraftRequest {
  // ID of the document to be updated.
  string document_id = 3;

  // List of document changes that must be applied to the existing document.
  repeated DocumentChange changes = 4;
}

// Response after draft is updated.
message UpdateDraftResponse {
  // The ID of the change representing the draft version after the update is processed.
  string change_id = 1;

  // The state of the document after the update.
  Document updated_document = 2;
}

// Relationship between a document and an account
enum RoleType {
  // No permissions.
  ROLE_UNSPECIFIED = 0;

  // The role for an owner. All permissions are granted.
  OWNER = 1;

  // Allowed to invite/remove writers+collaborators, edit content, and merge suggested changes
  EDITOR = 2;

  // Allowed to change content
  WRITER = 3;

  // Their comments and suggested changes will be distributed alongside the document
  COLLABORATOR = 4;
}

// Granular document change.
message DocumentChange {
  // Operation to move an existing block to a different place in the document.
  // Move and Create operations are both expressed with this.
  // Conceptually new blocks are moved out of nowhere into the document.
  message MoveBlock {
    // ID of the block to move.
    string block_id = 1;

    // ID of the new parent for the block being moved.
    string parent = 2;

    // ID of the new left sibling for the block being moved.
    string left_sibling = 3;
  }

  // Operation to replace a metadata field with a new value
  message SetMetadata {
    // Metadata key to set.
    string key = 1;

    // Metadata value to set.
    string value = 2;
    // "ipfs://ABC" - Use CID as reference material
    // "hm://DOC_ID" - Document ID as reference material
    // other random data
    // "https://example.com"
    // DATE FORMAT
  }

  // Operation to replace an index field with a new value
  message SetIndex {
    // Index key to set.
    string key = 1;

    // Index value to set.
    string value = 2;
    // example values
    // "DOC_ID"
    // "@CHANGE_ID"
    // "@CHANGE_ID.CHANGE_ID2"
    // "#FRAGMENT"
    // "a/ACCOUNT_ID"
  }

  // Operation to change membership
  message UpdateMember {
    // Account ID to update the role for.
    string account_id = 1;

    // New role to set for the account.
    RoleType role = 2;
  }

  oneof op {
    // New metadata to set on the document.
    SetMetadata set_metadata = 1;

    // New index to set on the document.
    SetIndex set_index = 2;

    // Move operation that creates/moves a block within the document hierarchy.
    MoveBlock move_block = 3;

    // New block state that replaces an existing block.
    Block replace_block = 4;

    // ID of a block to delete.
    string delete_block = 5;

    // Update membership for an account on this document.
    UpdateMember update_member = 6;
  }
}

// Request to list stored drafts.
message ListDraftsRequest {
  // Optional. Number of results per page.
  int32 page_size = 1;

  // Optional. Token for the page to return.
  string page_token = 2;
}

// Response for listing drafts.
message ListDraftsResponse {
  // Drafts matching the list request.
  // Content is omitted.
  repeated Document documents = 1;

  // Token for the next page if there's any.
  string next_page_token = 2;
}

// Request to list document drafts.
message ListDocumentDraftsRequest {
  // ID of the document to list drafts for.
  string document_id = 1;
}

// Response with the list of drafts for a given document ID.
message ListDocumentDraftsResponse {
  // Drafts come without content, only metadata,
  // similar to the rest of list responses.
  repeated Document drafts = 1;
}

// Request to publish a draft.
message PublishDraftRequest {
  // ID of the draft to be published.
  string draft_id = 1;
}

// === Documents Service ===

// Documents service provides access to documents.
service Documents {
  // Gets a single document.
  rpc GetDocument(GetDocumentRequest) returns (Document);

  // Gets an account's profile document.
  rpc GetProfileDocument(GetProfileDocumentRequest) returns (Document);

  // Gets a document within the index(es) of other documents
  rpc GetDocumentIndex(GetDocumentIndexRequest) returns (GetDocumentIndexResponse);

  // Immediately changes a document
  rpc ChangeDocument(ChangeDocumentRequest) returns (Document);

  // Immediately changes an account's profile document
  rpc ChangeProfileDocument(ChangeProfileDocumentRequest) returns (Document);

  // Lists all documents. Only the most recent versions show up.
  rpc ListDocuments(ListDocumentsRequest) returns (ListDocumentsResponse);

  // Lists branches of a document. Includes standalone and index branches, and any drafts for these branches
  rpc ListDocumentBranches(ListDocumentBranchesRequest) returns (ListDocumentBranchesResponse);

  // Push Local document to the gateway.
  rpc PushDocument(PushDocumentRequest) returns (google.protobuf.Empty);

  // Lists documents owned by a given account.
  rpc ListAccountDocuments(ListAccountDocumentsRequest) returns (ListDocumentsResponse);
}

// Request for getting a single document.
message GetDocumentRequest {
  // Required. ID of the published document.
  string document_id = 1;

  // Optional. Specific version of the published document. If empty, the latest one is returned.
  string version = 2;
}

// Request for getting an account's profile document.
message GetProfileDocumentRequest {
  // Required. ID of the account.
  string account_id = 1;

  // Optional. Specific version of the profile. If empty, the latest one is returned.
  string version = 2;
}

// Used to request the document within the indexes of other documents
message GetDocumentIndexRequest {
  // the parent document ID
  string document_id = 1;

  // the path of the document which will be retrieved. may include slashes to represent a deep index
  string path = 2;
}

message GetDocumentIndexResponse {
  // id of the parent document
  string document_id = 1;

  // version of the parent document
  string version = 2;

  // path of the child document. may include slashes to represent a deep index
  string path = 3;

  // the document at the given path
  Document document = 4;
}

message ChangeDocumentRequest {
  // Required. ID of the document to be updated.
  string document_id = 1;

  // Required. Changes to be applied to the document.
  repeated DocumentChange changes = 2;
}

message ChangeProfileDocumentRequest {
  // Required. Account ID to update the profile document for.
  string account_id = 1;

  // Required. Changes to be applied to the profile document.
  repeated DocumentChange changes = 2;
}

// Request for getting a single document.
message PushDocumentRequest {
  // Required. ID of the published document to be pushed.
  string document_id = 1;

  // Required. URL of the gateway to push to. Multiaddress format accepted (comma separated).
  string url = 2;
}

// Request for listing documents.
message ListDocumentsRequest {
  // Optional. Number of results per page. Default is defined by the server.
  int32 page_size = 1;

  // Optional. Value from next_page_token obtains from a previous response.
  string page_token = 2;
}

// Response with list of documents.
message ListDocumentsResponse {
  // List of documents matching the request.
  // Only most recent versions are returned.
  // Content is omitted, only metadata is present.
  repeated Document documents = 1;

  // Token for the next page if there're more results.
  string next_page_token = 2;
}

message ListDocumentBranchesRequest {
  // Required. ID of the document to list branches for.
  string document_id = 1;
}

message ListDocumentBranchesResponse {
  // List of branches for the document.
  repeated Branch branches = 1;

  // List of drafts for these branches. Includes a draft that will become a draft when published.
  repeated Draft drafts = 2;
}

message Branch {
  // ID for use when deleting or publishing the branch
  string branch_id = 1;

  // ID of the top-level doc which will be updated. For standalone branches this is the doc ID.
  // for index branches this is the parent doc ID.
  string document_id = 2;

  // the path of the document which is being updated. may include slashes to represent a deep index
  string path = 3;
}

// Request for listing documents owned by a given account.
message ListAccountDocumentsRequest {
  // Optional. Number of results per page. Default is defined by the server.
  int32 page_size = 1;

  // Optional. Value from next_page_token obtains from a previous response.
  string page_token = 2;

  // Required. Account ID to list documents for.
  string account_id = 3;
}

// === Merge Service ===

// Merge service provides access to merge documents.
service Merge {
  // Merge changes and publishes.
  rpc MergeChanges(MergeChangesRequest) returns (Document);

  // Rebase changes
  rpc RebaseChanges(RebaseChangesRequest) returns (Document);
}

// Request for merging changes in a document.
message MergeChangesRequest {
  // Required. Document ID from which versions are going to be taken.
  string id = 1;

  // Required. Versions to be merged.
  repeated string versions = 2;
}

// Request for rebasing changes in a document.
message RebaseChangesRequest {
  // Required. Draft ID to be rebased.
  string base_draft_id = 1;

  // Required. Versions to be applied applied on top of the base document.
  repeated string versions = 3;
}

// === Types ===

message Draft {
  // to identify the draft
  string draft_id = 1;

  // state of the draft
  Document document = 2;

  // True if this is a profile draft
  bool is_profile = 3;

  // The top-level entity that this draft will update once published. An Account ID for profile drafts, otherwise Document ID.
  string entity_id = 4;

  // Optional. The path where the draft will be updated once published
  string path = 5;
}

// Document represents metadata and content of a document.
message Document {
  // Permanent ID of the document.
  string id = 1;

  // Output only. Owner's Account ID.
  string owner = 2;

  // Metadata values for a document.
  map<string, string> metadata = 3;

  // Output only. Set to account ID if this is a profile document.
  string profile_account_id = 4;

  // Output only. Every account ID who has modified the document.
  // Includes the original author as well.
  repeated string authors = 5;

  // Blocks content of the document.
  repeated BlockNode content = 6;

  // The indexed children documents under this document.
  // Keys are used as the path names (and slash "/" is not allowed in the key)
  // Values will refer to other documents as exact versions such as "hm://DOC_ID?v=1"
  // Values may refer to "latest" versions with "hm://DOC_ID"
  map<string, string> index = 7;

  // Output only. Time when document was created.
  google.protobuf.Timestamp create_time = 8;

  // Output only. Time when document was updated.
  google.protobuf.Timestamp update_time = 9;

  // Output only. Time when this version was published. Not present in drafts.
  google.protobuf.Timestamp publish_time = 10;

  // Output only. Current version of the document.
  string version = 11;

  // Output only. Previous version of the document,
  // Empty if this is the first version.
  string previous_version = 12;
}

// Content block with children.
message BlockNode {
  // Content block.
  Block block = 1;

  // Child blocks.
  repeated BlockNode children = 2;
}

// Content block.
message Block {
  // Block ID. Must be unique within the document.
  string id = 1;

  // Type of the block. Specific to the renderer.
  string type = 2;

  // Text of the content block.
  string text = 3;

  // Optional. The hyperlink to an external resource.
  // Must be a valid URL.
  string ref = 7;

  // Arbitrary attributes of the block.
  map<string, string> attributes = 4;

  // Annotation "layers" of the block.
  repeated Annotation annotations = 5;

  // Output only. Current revision of the block. It's the ID of the last Change that modified this block.
  // Additional information about the Change can be obtained using the Changes service.
  string revision = 6;
}

// Conceptual annotation "layer" that is applied to arbitrary spans of block text.
// An "identity" of the layer should be derived deterministically based on its type
// attributes. Spans inside the same annotation can't overlap.
//
// Spans are stored inside the Annotation in a "columnar" format,
// i.e. StructureOfArrays instead of ArrayOfStructures. See: https://en.wikipedia.org/wiki/AoS_and_SoA.
// This is useful to reduce the number of allocations and offers more compact serialization, because
// protobuf is able to "pack" primitive repeated fields more efficiently.
message Annotation {
  // Type of the annotation.
  string type = 1;

  // Optional. A hyperlink to an external resource.
  // Must be a valid URL.
  string ref = 5;

  // Arbitrary key-value attributes of the annotation.
  map<string, string> attributes = 2;

  // Start offsets of possibly disjoint spans of text for which this annotation is applied.
  // Must be sorted and have the same number of items as `ends` list.
  repeated int32 starts = 3;

  // End offsets of possibly disjoint spans of text for which this annotation is applied.
  // Must be sorted and have the same number of items as `starts` list.
  repeated int32 ends = 4;
}
