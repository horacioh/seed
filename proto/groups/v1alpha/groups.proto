syntax = "proto3";

package com.seed.groups.v1alpha;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "seed/backend/genproto/groups/v1alpha;groups";

// Groups service exposes the functionality for managing group entities.
// This API uses fully-qualified EID as group IDs in all the requests.
service Groups {
  // Creates a new group.
  rpc CreateGroup(CreateGroupRequest) returns (Group);

  // Gets a group by ID.
  rpc GetGroup(GetGroupRequest) returns (Group);

  // Updates a group.
  rpc UpdateGroup(UpdateGroupRequest) returns (Group);

  // Forces a sync of a group with its site.
  // Only works for those groups that are published to sites.
  // Could be useful to trigger the sync manually
  // without having to wait for the next round of the automatic periodic sync.
  rpc SyncGroupSite(SyncGroupSiteRequest) returns (SyncGroupSiteResponse);

  // Lists members of a group.
  rpc ListMembers(ListMembersRequest) returns (ListMembersResponse);

  // Lists content of a group.
  rpc ListContent(ListContentRequest) returns (ListContentResponse);

  // Lists groups.
  rpc ListGroups(ListGroupsRequest) returns (ListGroupsResponse);

  // Lists groups that a document is published to.
  rpc ListDocumentGroups(ListDocumentGroupsRequest) returns (ListDocumentGroupsResponse);

  // Lists groups that an account is a member of.
  rpc ListAccountGroups(ListAccountGroupsRequest) returns (ListAccountGroupsResponse);
}

// Request to create a group.
message CreateGroupRequest {
  // Required. Title of the new group.
  string title = 1;

  // Optional. Description of the new group.
  string description = 2;

  // Optional. List of initial members for the new group.
  // Members can also be managed with separate requests after group is already created.
  map<string, Role> members = 3;

  // Optional. Secret setup URL that is provided during site server deployment.
  // I.e. a place on the Web where this group has to be published.
  string site_setup_url = 4;
}

// Request to get a group.
message GetGroupRequest {
  // Required. ID of the group to get.
  // Must be a fully-qualified EID.
  string id = 1;

  // Optional. Version of the group to get information about.
  // If empty, latest_version is assumed.
  string version = 2;
}

// Request to update a group.
// Some fields are required, even if unchanged,
// to distinguish between setting the value to an empty string, from an unchanged value.
// Read the comments!
message UpdateGroupRequest {
  // ID of the group to update.
  string id = 1;

  // Optional. Title of the Group.
  // Can be omitted if unchanged.
  // Cannot be cleared. Groups without title make no sense.
  string title = 2;

  // Optional. Description of the Group.
  // Using value wrapper to distinguish between clearing the value and leaving it unchanged.
  google.protobuf.StringValue description = 3;

  // Optional. List of members to be updated in the Group.
  // Key is the member's Account ID,
  // value is the Role.
  // To remove a member from the group, set the role to unspecified.
  // Only updated records have to be sent, not all the members of the group.
  map<string, Role> updated_members = 4;

  // Optional. List of content to be updated in the Group.
  // Key is a pretty path on which the content is published,
  // value is a Hypermedia URL of the content.
  // To unpublish content set the value to an empty string for a given pretty path.
  // Only updated records have to be sent, not all the content of the group.
  map<string, string> updated_content = 5;

  // Optional. Secret setup URL that is provided during site server deployment.
  // I.e. a place on the Web where this group has to be published.
  string site_setup_url = 6;
}

// Request to sync group site.
message SyncGroupSiteRequest {
  // Group ID to sync.
  string group_id = 1;
}

// Response for syncing a group site.
message SyncGroupSiteResponse {
  // The site info of a group after the sync.
  Group.SiteInfo site_info = 1;
}

// Request to list members.
message ListMembersRequest {
  // Required. ID of the group to list members of.
  string id = 1;

  // Optional. Version of the group to list members of.
  // If not specified, the latest version of the group
  // according to its members is used.
  string version = 2;

  // Optional. Maximum number of members to return.
  int32 page_size = 3;

  // Optional. Page token to continue listing members from.
  string page_token = 4;
}

// Response to list members.
message ListMembersResponse {
  // ID of the group owner.
  string owner_account_id = 1;

  // List of members of the group, including the owner.
  map<string, Role> members = 2;

  // Token to continue listing members from.
  string next_page_token = 3;
}

// Request to list content.
message ListContentRequest {
  // Required. ID of the group to list content of.
  string id = 1;

  // Optional. Version of the group to list content of.
  // If not specified, the latest version of the group
  // according to its members is used.
  string version = 2;

  // Optional. Maximum number of content to return.
  int32 page_size = 3;

  // Optional. Page token to continue listing content from.
  string page_token = 4;
}

// Response to list content.
message ListContentResponse {
  // List of content of the group.
  // Key is the path and value is a Hypermedia URL to the content.
  map<string, string> content = 1;

  // Token to continue listing content from.
  string next_page_token = 2;
}

// Request to list groups.
message ListGroupsRequest {
  // Optional. Maximum number of groups to return.
  int32 page_size = 1;

  // Optional. Page token to continue listing groups from.
  string page_token = 2;
}

// Response to list groups.
message ListGroupsResponse {
  // List of groups.
  repeated Group groups = 1;

  // Token to continue listing groups from.
  string next_page_token = 2;
}

// Request to list groups for a document.
message ListDocumentGroupsRequest {
  // Required. ID of the document to list groups for.
  // Must be fully-qualified Entity ID.
  string document_id = 1;

  // Optional. Maximum number of groups to return.
  int32 page_size = 2;

  // Optional. Page token to continue listing groups from.
  string page_token = 3;
}

// Response to list groups for a document.
message ListDocumentGroupsResponse {
  message Item {
    // ID of the group that the document is published to.
    string group_id = 1;

    // ID of the group change that published the document to the group.
    // I.e. the version of the group that introduced the document to the group.
    string change_id = 2;

    // Timestamp of the change that published the document to the group.
    google.protobuf.Timestamp change_time = 3;

    // Path at which document is published.
    string path = 4;

    // Raw URL that is published to the group.
    string raw_url = 5;
  }

  // List of document publications in groups.
  repeated Item items = 1;

  // Token to continue listing groups from.
  string next_page_token = 2;
}

// Request to list groups for an account.
message ListAccountGroupsRequest {
  // Required. ID of the account to list groups for.
  // Must be Account ID, not the ID of the Account Entity.
  string account_id = 1;

  // Optional. Maximum number of groups to return.
  int32 page_size = 2;

  // Optional. Page token to continue listing groups from.
  string page_token = 3;
}

// Response to list groups for an account.
message ListAccountGroupsResponse {
  message Item {
    Group group = 1;

    Role role = 2;
  }

  // List of groups that the account is a member of with their role.
  repeated Item items = 1;

  // Token to continue listing groups from.
  string next_page_token = 2;
}

// Group represents the basic information about a group entity.
message Group {
  // Extra metadata about Site Groups.
  message SiteInfo {
    // Base Web URL of the Site where the Group is being published to.
    string base_url = 1;

    // Timestamp of the last sync of the Group's content with the Site.
    // This field will be updated regardless of whether we were able to sync or not.
    google.protobuf.Timestamp last_sync_time = 2;

    // Timestamp of the last successful sync of the Group's content with the Site.
    google.protobuf.Timestamp last_ok_sync_time = 3;

    // The error message from the last sync (if it was unsuccessful).
    string last_sync_error = 5;

    // Version of the Group as per the Site.
    string version = 4;
  }

  // ID of the group.
  string id = 1;

  // Title of the group.
  string title = 2;

  // Description of the group.
  string description = 3;

  // Account ID of the group owner.
  string owner_account_id = 4;

  // Timestamp when the group was first created.
  google.protobuf.Timestamp create_time = 5;

  // Version of the group entity that is being returned by the server.
  // When latest version is requested, this is the same as latest_version.
  string version = 6;

  // Timestamp of the version of the group.
  google.protobuf.Timestamp update_time = 7;

  // Optional. Site-related information for groups that are published to sites.
  SiteInfo site_info = 8;
}

// Role of a group member.
enum Role {
  // Zero value which is an invalid role. This role is used to delete members,
  // and serves as a tombstone, because in our CRDT there's no way to truly delete something.
  ROLE_UNSPECIFIED = 0;

  // Output only. Role for an owner. Cannot be used in updates, can only be returned in queries.
  OWNER = 1;

  // Editor role which allows members to manage content of the group.
  EDITOR = 2;
}